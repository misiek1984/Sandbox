#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LinqTo
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ExecutionTraceDB")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertType(Type instance);
    partial void UpdateType(Type instance);
    partial void DeleteType(Type instance);
    partial void InsertCall(Call instance);
    partial void UpdateCall(Call instance);
    partial void DeleteCall(Call instance);
    partial void InsertEvent(Event instance);
    partial void UpdateEvent(Event instance);
    partial void DeleteEvent(Event instance);
    partial void InsertException(Exception instance);
    partial void UpdateException(Exception instance);
    partial void DeleteException(Exception instance);
    partial void InsertExecutionTrace(ExecutionTrace instance);
    partial void UpdateExecutionTrace(ExecutionTrace instance);
    partial void DeleteExecutionTrace(ExecutionTrace instance);
    partial void InsertMessage(Message instance);
    partial void UpdateMessage(Message instance);
    partial void DeleteMessage(Message instance);
    partial void InsertNamespace(Namespace instance);
    partial void UpdateNamespace(Namespace instance);
    partial void DeleteNamespace(Namespace instance);
    partial void InsertParameter(Parameter instance);
    partial void UpdateParameter(Parameter instance);
    partial void DeleteParameter(Parameter instance);
    partial void InsertParametersValue(ParametersValue instance);
    partial void UpdateParametersValue(ParametersValue instance);
    partial void DeleteParametersValue(ParametersValue instance);
    partial void InsertPattern(Pattern instance);
    partial void UpdatePattern(Pattern instance);
    partial void DeletePattern(Pattern instance);
    partial void InsertPatternsCall(PatternsCall instance);
    partial void UpdatePatternsCall(PatternsCall instance);
    partial void DeletePatternsCall(PatternsCall instance);
    partial void InsertProcessInfo(ProcessInfo instance);
    partial void UpdateProcessInfo(ProcessInfo instance);
    partial void DeleteProcessInfo(ProcessInfo instance);
    partial void InsertSubprogram(Subprogram instance);
    partial void UpdateSubprogram(Subprogram instance);
    partial void DeleteSubprogram(Subprogram instance);
    partial void InsertSystemInfo(SystemInfo instance);
    partial void UpdateSystemInfo(SystemInfo instance);
    partial void DeleteSystemInfo(SystemInfo instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::LinqTo.Properties.Settings.Default.ExecutionTraceDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Type> Types
		{
			get
			{
				return this.GetTable<Type>();
			}
		}
		
		public System.Data.Linq.Table<Call> Calls
		{
			get
			{
				return this.GetTable<Call>();
			}
		}
		
		public System.Data.Linq.Table<Event> Events
		{
			get
			{
				return this.GetTable<Event>();
			}
		}
		
		public System.Data.Linq.Table<Exception> Exceptions
		{
			get
			{
				return this.GetTable<Exception>();
			}
		}
		
		public System.Data.Linq.Table<ExecutionTrace> ExecutionTraces
		{
			get
			{
				return this.GetTable<ExecutionTrace>();
			}
		}
		
		public System.Data.Linq.Table<Message> Messages
		{
			get
			{
				return this.GetTable<Message>();
			}
		}
		
		public System.Data.Linq.Table<Namespace> Namespaces
		{
			get
			{
				return this.GetTable<Namespace>();
			}
		}
		
		public System.Data.Linq.Table<Parameter> Parameters
		{
			get
			{
				return this.GetTable<Parameter>();
			}
		}
		
		public System.Data.Linq.Table<ParametersValue> ParametersValues
		{
			get
			{
				return this.GetTable<ParametersValue>();
			}
		}
		
		public System.Data.Linq.Table<Pattern> Patterns
		{
			get
			{
				return this.GetTable<Pattern>();
			}
		}
		
		public System.Data.Linq.Table<PatternsCall> PatternsCalls
		{
			get
			{
				return this.GetTable<PatternsCall>();
			}
		}
		
		public System.Data.Linq.Table<ProcessInfo> ProcessInfos
		{
			get
			{
				return this.GetTable<ProcessInfo>();
			}
		}
		
		public System.Data.Linq.Table<Subprogram> Subprograms
		{
			get
			{
				return this.GetTable<Subprogram>();
			}
		}
		
		public System.Data.Linq.Table<SystemInfo> SystemInfos
		{
			get
			{
				return this.GetTable<SystemInfo>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Types")]
	public partial class Type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _Name;
		
		private long _NamespaceId;
		
		private long _ExecutionTraceId;
		
		private System.Nullable<long> _UniqueId;
		
		private System.Nullable<long> _NamespaceUniqueId;
		
		private EntitySet<Exception> _Exceptions;
		
		private EntitySet<Parameter> _Parameters;
		
		private EntitySet<Subprogram> _Subprograms;
		
		private EntitySet<Subprogram> _Subprograms1;
		
		private EntityRef<ExecutionTrace> _ExecutionTrace;
		
		private EntityRef<Namespace> _Namespace;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnNamespaceIdChanging(long value);
    partial void OnNamespaceIdChanged();
    partial void OnExecutionTraceIdChanging(long value);
    partial void OnExecutionTraceIdChanged();
    partial void OnUniqueIdChanging(System.Nullable<long> value);
    partial void OnUniqueIdChanged();
    partial void OnNamespaceUniqueIdChanging(System.Nullable<long> value);
    partial void OnNamespaceUniqueIdChanged();
    #endregion
		
		public Type()
		{
			this._Exceptions = new EntitySet<Exception>(new Action<Exception>(this.attach_Exceptions), new Action<Exception>(this.detach_Exceptions));
			this._Parameters = new EntitySet<Parameter>(new Action<Parameter>(this.attach_Parameters), new Action<Parameter>(this.detach_Parameters));
			this._Subprograms = new EntitySet<Subprogram>(new Action<Subprogram>(this.attach_Subprograms), new Action<Subprogram>(this.detach_Subprograms));
			this._Subprograms1 = new EntitySet<Subprogram>(new Action<Subprogram>(this.attach_Subprograms1), new Action<Subprogram>(this.detach_Subprograms1));
			this._ExecutionTrace = default(EntityRef<ExecutionTrace>);
			this._Namespace = default(EntityRef<Namespace>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NamespaceId", DbType="BigInt NOT NULL")]
		public long NamespaceId
		{
			get
			{
				return this._NamespaceId;
			}
			set
			{
				if ((this._NamespaceId != value))
				{
					if (this._Namespace.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNamespaceIdChanging(value);
					this.SendPropertyChanging();
					this._NamespaceId = value;
					this.SendPropertyChanged("NamespaceId");
					this.OnNamespaceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExecutionTraceId", DbType="BigInt NOT NULL")]
		public long ExecutionTraceId
		{
			get
			{
				return this._ExecutionTraceId;
			}
			set
			{
				if ((this._ExecutionTraceId != value))
				{
					if (this._ExecutionTrace.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExecutionTraceIdChanging(value);
					this.SendPropertyChanging();
					this._ExecutionTraceId = value;
					this.SendPropertyChanged("ExecutionTraceId");
					this.OnExecutionTraceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UniqueId", DbType="BigInt")]
		public System.Nullable<long> UniqueId
		{
			get
			{
				return this._UniqueId;
			}
			set
			{
				if ((this._UniqueId != value))
				{
					this.OnUniqueIdChanging(value);
					this.SendPropertyChanging();
					this._UniqueId = value;
					this.SendPropertyChanged("UniqueId");
					this.OnUniqueIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NamespaceUniqueId", DbType="BigInt")]
		public System.Nullable<long> NamespaceUniqueId
		{
			get
			{
				return this._NamespaceUniqueId;
			}
			set
			{
				if ((this._NamespaceUniqueId != value))
				{
					this.OnNamespaceUniqueIdChanging(value);
					this.SendPropertyChanging();
					this._NamespaceUniqueId = value;
					this.SendPropertyChanged("NamespaceUniqueId");
					this.OnNamespaceUniqueIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Type_Exception", Storage="_Exceptions", ThisKey="Id", OtherKey="TypeId")]
		public EntitySet<Exception> Exceptions
		{
			get
			{
				return this._Exceptions;
			}
			set
			{
				this._Exceptions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Type_Parameter", Storage="_Parameters", ThisKey="Id", OtherKey="TypeId")]
		public EntitySet<Parameter> Parameters
		{
			get
			{
				return this._Parameters;
			}
			set
			{
				this._Parameters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Type_Subprogram", Storage="_Subprograms", ThisKey="Id", OtherKey="ContainingTypeId")]
		public EntitySet<Subprogram> Subprograms
		{
			get
			{
				return this._Subprograms;
			}
			set
			{
				this._Subprograms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Type_Subprogram1", Storage="_Subprograms1", ThisKey="Id", OtherKey="ReturnTypeId")]
		public EntitySet<Subprogram> Subprograms1
		{
			get
			{
				return this._Subprograms1;
			}
			set
			{
				this._Subprograms1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExecutionTrace_Type", Storage="_ExecutionTrace", ThisKey="ExecutionTraceId", OtherKey="Id", IsForeignKey=true)]
		public ExecutionTrace ExecutionTrace
		{
			get
			{
				return this._ExecutionTrace.Entity;
			}
			set
			{
				ExecutionTrace previousValue = this._ExecutionTrace.Entity;
				if (((previousValue != value) 
							|| (this._ExecutionTrace.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ExecutionTrace.Entity = null;
						previousValue.Types.Remove(this);
					}
					this._ExecutionTrace.Entity = value;
					if ((value != null))
					{
						value.Types.Add(this);
						this._ExecutionTraceId = value.Id;
					}
					else
					{
						this._ExecutionTraceId = default(long);
					}
					this.SendPropertyChanged("ExecutionTrace");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Namespace_Type", Storage="_Namespace", ThisKey="NamespaceId", OtherKey="Id", IsForeignKey=true)]
		public Namespace Namespace
		{
			get
			{
				return this._Namespace.Entity;
			}
			set
			{
				Namespace previousValue = this._Namespace.Entity;
				if (((previousValue != value) 
							|| (this._Namespace.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Namespace.Entity = null;
						previousValue.Types.Remove(this);
					}
					this._Namespace.Entity = value;
					if ((value != null))
					{
						value.Types.Add(this);
						this._NamespaceId = value.Id;
					}
					else
					{
						this._NamespaceId = default(long);
					}
					this.SendPropertyChanged("Namespace");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Exceptions(Exception entity)
		{
			this.SendPropertyChanging();
			entity.Type = this;
		}
		
		private void detach_Exceptions(Exception entity)
		{
			this.SendPropertyChanging();
			entity.Type = null;
		}
		
		private void attach_Parameters(Parameter entity)
		{
			this.SendPropertyChanging();
			entity.Type = this;
		}
		
		private void detach_Parameters(Parameter entity)
		{
			this.SendPropertyChanging();
			entity.Type = null;
		}
		
		private void attach_Subprograms(Subprogram entity)
		{
			this.SendPropertyChanging();
			entity.Type = this;
		}
		
		private void detach_Subprograms(Subprogram entity)
		{
			this.SendPropertyChanging();
			entity.Type = null;
		}
		
		private void attach_Subprograms1(Subprogram entity)
		{
			this.SendPropertyChanging();
			entity.Type1 = this;
		}
		
		private void detach_Subprograms1(Subprogram entity)
		{
			this.SendPropertyChanging();
			entity.Type1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Calls")]
	public partial class Call : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private System.Nullable<long> _EnterOrdinal;
		
		private System.Nullable<long> _ExitOrdinal;
		
		private System.Nullable<long> _ParentCallId;
		
		private System.Nullable<long> _SubprogramId;
		
		private string _SubprogramFullName;
		
		private System.Nullable<long> _ParentSubprogramId;
		
		private string _ParentSubprogramFullName;
		
		private string _ReturnValue;
		
		private string _ParametersValues;
		
		private int _NumberOfThrownExceptions;
		
		private int _NumberOfCoughtExceptions;
		
		private int _Thread;
		
		private System.Nullable<int> _CallStackDepth;
		
		private long _ExecutionTraceId;
		
		private System.Nullable<long> _ObjectId;
		
		private System.Nullable<long> _SubprogramUniqueId;
		
		private System.Nullable<long> _ParentSubprogramUniqueId;
		
		private System.Nullable<long> _LocalId;
		
		private System.Nullable<long> _ParentLocalCallId;
		
		private System.Nullable<System.DateTime> _ExecutionTimeStart;
		
		private System.Nullable<System.DateTime> _ExecutionTimeEnd;
		
		private EntitySet<Call> _Calls;
		
		private EntitySet<Exception> _Exceptions;
		
		private EntitySet<ParametersValue> _ParametersValues1;
		
		private EntitySet<PatternsCall> _PatternsCalls;
		
		private EntityRef<Call> _Call1;
		
		private EntityRef<ExecutionTrace> _ExecutionTrace;
		
		private EntityRef<Subprogram> _Subprogram;
		
		private EntityRef<Subprogram> _Subprogram1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnEnterOrdinalChanging(System.Nullable<long> value);
    partial void OnEnterOrdinalChanged();
    partial void OnExitOrdinalChanging(System.Nullable<long> value);
    partial void OnExitOrdinalChanged();
    partial void OnParentCallIdChanging(System.Nullable<long> value);
    partial void OnParentCallIdChanged();
    partial void OnSubprogramIdChanging(System.Nullable<long> value);
    partial void OnSubprogramIdChanged();
    partial void OnSubprogramFullNameChanging(string value);
    partial void OnSubprogramFullNameChanged();
    partial void OnParentSubprogramIdChanging(System.Nullable<long> value);
    partial void OnParentSubprogramIdChanged();
    partial void OnParentSubprogramFullNameChanging(string value);
    partial void OnParentSubprogramFullNameChanged();
    partial void OnReturnValueChanging(string value);
    partial void OnReturnValueChanged();
    partial void OnParametersValuesChanging(string value);
    partial void OnParametersValuesChanged();
    partial void OnNumberOfThrownExceptionsChanging(int value);
    partial void OnNumberOfThrownExceptionsChanged();
    partial void OnNumberOfCoughtExceptionsChanging(int value);
    partial void OnNumberOfCoughtExceptionsChanged();
    partial void OnThreadChanging(int value);
    partial void OnThreadChanged();
    partial void OnCallStackDepthChanging(System.Nullable<int> value);
    partial void OnCallStackDepthChanged();
    partial void OnExecutionTraceIdChanging(long value);
    partial void OnExecutionTraceIdChanged();
    partial void OnObjectIdChanging(System.Nullable<long> value);
    partial void OnObjectIdChanged();
    partial void OnSubprogramUniqueIdChanging(System.Nullable<long> value);
    partial void OnSubprogramUniqueIdChanged();
    partial void OnParentSubprogramUniqueIdChanging(System.Nullable<long> value);
    partial void OnParentSubprogramUniqueIdChanged();
    partial void OnLocalIdChanging(System.Nullable<long> value);
    partial void OnLocalIdChanged();
    partial void OnParentLocalCallIdChanging(System.Nullable<long> value);
    partial void OnParentLocalCallIdChanged();
    partial void OnExecutionTimeStartChanging(System.Nullable<System.DateTime> value);
    partial void OnExecutionTimeStartChanged();
    partial void OnExecutionTimeEndChanging(System.Nullable<System.DateTime> value);
    partial void OnExecutionTimeEndChanged();
    #endregion
		
		public Call()
		{
			this._Calls = new EntitySet<Call>(new Action<Call>(this.attach_Calls), new Action<Call>(this.detach_Calls));
			this._Exceptions = new EntitySet<Exception>(new Action<Exception>(this.attach_Exceptions), new Action<Exception>(this.detach_Exceptions));
			this._ParametersValues1 = new EntitySet<ParametersValue>(new Action<ParametersValue>(this.attach_ParametersValues1), new Action<ParametersValue>(this.detach_ParametersValues1));
			this._PatternsCalls = new EntitySet<PatternsCall>(new Action<PatternsCall>(this.attach_PatternsCalls), new Action<PatternsCall>(this.detach_PatternsCalls));
			this._Call1 = default(EntityRef<Call>);
			this._ExecutionTrace = default(EntityRef<ExecutionTrace>);
			this._Subprogram = default(EntityRef<Subprogram>);
			this._Subprogram1 = default(EntityRef<Subprogram>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnterOrdinal", DbType="BigInt")]
		public System.Nullable<long> EnterOrdinal
		{
			get
			{
				return this._EnterOrdinal;
			}
			set
			{
				if ((this._EnterOrdinal != value))
				{
					this.OnEnterOrdinalChanging(value);
					this.SendPropertyChanging();
					this._EnterOrdinal = value;
					this.SendPropertyChanged("EnterOrdinal");
					this.OnEnterOrdinalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExitOrdinal", DbType="BigInt")]
		public System.Nullable<long> ExitOrdinal
		{
			get
			{
				return this._ExitOrdinal;
			}
			set
			{
				if ((this._ExitOrdinal != value))
				{
					this.OnExitOrdinalChanging(value);
					this.SendPropertyChanging();
					this._ExitOrdinal = value;
					this.SendPropertyChanged("ExitOrdinal");
					this.OnExitOrdinalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentCallId", DbType="BigInt")]
		public System.Nullable<long> ParentCallId
		{
			get
			{
				return this._ParentCallId;
			}
			set
			{
				if ((this._ParentCallId != value))
				{
					if (this._Call1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentCallIdChanging(value);
					this.SendPropertyChanging();
					this._ParentCallId = value;
					this.SendPropertyChanged("ParentCallId");
					this.OnParentCallIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubprogramId", DbType="BigInt")]
		public System.Nullable<long> SubprogramId
		{
			get
			{
				return this._SubprogramId;
			}
			set
			{
				if ((this._SubprogramId != value))
				{
					if (this._Subprogram.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubprogramIdChanging(value);
					this.SendPropertyChanging();
					this._SubprogramId = value;
					this.SendPropertyChanged("SubprogramId");
					this.OnSubprogramIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubprogramFullName", DbType="VarChar(2000) NOT NULL", CanBeNull=false)]
		public string SubprogramFullName
		{
			get
			{
				return this._SubprogramFullName;
			}
			set
			{
				if ((this._SubprogramFullName != value))
				{
					this.OnSubprogramFullNameChanging(value);
					this.SendPropertyChanging();
					this._SubprogramFullName = value;
					this.SendPropertyChanged("SubprogramFullName");
					this.OnSubprogramFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentSubprogramId", DbType="BigInt")]
		public System.Nullable<long> ParentSubprogramId
		{
			get
			{
				return this._ParentSubprogramId;
			}
			set
			{
				if ((this._ParentSubprogramId != value))
				{
					if (this._Subprogram1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentSubprogramIdChanging(value);
					this.SendPropertyChanging();
					this._ParentSubprogramId = value;
					this.SendPropertyChanged("ParentSubprogramId");
					this.OnParentSubprogramIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentSubprogramFullName", DbType="VarChar(2000)")]
		public string ParentSubprogramFullName
		{
			get
			{
				return this._ParentSubprogramFullName;
			}
			set
			{
				if ((this._ParentSubprogramFullName != value))
				{
					this.OnParentSubprogramFullNameChanging(value);
					this.SendPropertyChanging();
					this._ParentSubprogramFullName = value;
					this.SendPropertyChanged("ParentSubprogramFullName");
					this.OnParentSubprogramFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReturnValue", DbType="VarChar(MAX)")]
		public string ReturnValue
		{
			get
			{
				return this._ReturnValue;
			}
			set
			{
				if ((this._ReturnValue != value))
				{
					this.OnReturnValueChanging(value);
					this.SendPropertyChanging();
					this._ReturnValue = value;
					this.SendPropertyChanged("ReturnValue");
					this.OnReturnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParametersValues", DbType="VarChar(MAX)")]
		public string ParametersValues
		{
			get
			{
				return this._ParametersValues;
			}
			set
			{
				if ((this._ParametersValues != value))
				{
					this.OnParametersValuesChanging(value);
					this.SendPropertyChanging();
					this._ParametersValues = value;
					this.SendPropertyChanged("ParametersValues");
					this.OnParametersValuesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfThrownExceptions", DbType="Int NOT NULL")]
		public int NumberOfThrownExceptions
		{
			get
			{
				return this._NumberOfThrownExceptions;
			}
			set
			{
				if ((this._NumberOfThrownExceptions != value))
				{
					this.OnNumberOfThrownExceptionsChanging(value);
					this.SendPropertyChanging();
					this._NumberOfThrownExceptions = value;
					this.SendPropertyChanged("NumberOfThrownExceptions");
					this.OnNumberOfThrownExceptionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfCoughtExceptions", DbType="Int NOT NULL")]
		public int NumberOfCoughtExceptions
		{
			get
			{
				return this._NumberOfCoughtExceptions;
			}
			set
			{
				if ((this._NumberOfCoughtExceptions != value))
				{
					this.OnNumberOfCoughtExceptionsChanging(value);
					this.SendPropertyChanging();
					this._NumberOfCoughtExceptions = value;
					this.SendPropertyChanged("NumberOfCoughtExceptions");
					this.OnNumberOfCoughtExceptionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Thread", DbType="Int NOT NULL")]
		public int Thread
		{
			get
			{
				return this._Thread;
			}
			set
			{
				if ((this._Thread != value))
				{
					this.OnThreadChanging(value);
					this.SendPropertyChanging();
					this._Thread = value;
					this.SendPropertyChanged("Thread");
					this.OnThreadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CallStackDepth", DbType="Int")]
		public System.Nullable<int> CallStackDepth
		{
			get
			{
				return this._CallStackDepth;
			}
			set
			{
				if ((this._CallStackDepth != value))
				{
					this.OnCallStackDepthChanging(value);
					this.SendPropertyChanging();
					this._CallStackDepth = value;
					this.SendPropertyChanged("CallStackDepth");
					this.OnCallStackDepthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExecutionTraceId", DbType="BigInt NOT NULL")]
		public long ExecutionTraceId
		{
			get
			{
				return this._ExecutionTraceId;
			}
			set
			{
				if ((this._ExecutionTraceId != value))
				{
					if (this._ExecutionTrace.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExecutionTraceIdChanging(value);
					this.SendPropertyChanging();
					this._ExecutionTraceId = value;
					this.SendPropertyChanged("ExecutionTraceId");
					this.OnExecutionTraceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectId", DbType="BigInt")]
		public System.Nullable<long> ObjectId
		{
			get
			{
				return this._ObjectId;
			}
			set
			{
				if ((this._ObjectId != value))
				{
					this.OnObjectIdChanging(value);
					this.SendPropertyChanging();
					this._ObjectId = value;
					this.SendPropertyChanged("ObjectId");
					this.OnObjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubprogramUniqueId", DbType="BigInt")]
		public System.Nullable<long> SubprogramUniqueId
		{
			get
			{
				return this._SubprogramUniqueId;
			}
			set
			{
				if ((this._SubprogramUniqueId != value))
				{
					this.OnSubprogramUniqueIdChanging(value);
					this.SendPropertyChanging();
					this._SubprogramUniqueId = value;
					this.SendPropertyChanged("SubprogramUniqueId");
					this.OnSubprogramUniqueIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentSubprogramUniqueId", DbType="BigInt")]
		public System.Nullable<long> ParentSubprogramUniqueId
		{
			get
			{
				return this._ParentSubprogramUniqueId;
			}
			set
			{
				if ((this._ParentSubprogramUniqueId != value))
				{
					this.OnParentSubprogramUniqueIdChanging(value);
					this.SendPropertyChanging();
					this._ParentSubprogramUniqueId = value;
					this.SendPropertyChanged("ParentSubprogramUniqueId");
					this.OnParentSubprogramUniqueIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocalId", DbType="BigInt")]
		public System.Nullable<long> LocalId
		{
			get
			{
				return this._LocalId;
			}
			set
			{
				if ((this._LocalId != value))
				{
					this.OnLocalIdChanging(value);
					this.SendPropertyChanging();
					this._LocalId = value;
					this.SendPropertyChanged("LocalId");
					this.OnLocalIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentLocalCallId", DbType="BigInt")]
		public System.Nullable<long> ParentLocalCallId
		{
			get
			{
				return this._ParentLocalCallId;
			}
			set
			{
				if ((this._ParentLocalCallId != value))
				{
					this.OnParentLocalCallIdChanging(value);
					this.SendPropertyChanging();
					this._ParentLocalCallId = value;
					this.SendPropertyChanged("ParentLocalCallId");
					this.OnParentLocalCallIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExecutionTimeStart", DbType="DateTime2")]
		public System.Nullable<System.DateTime> ExecutionTimeStart
		{
			get
			{
				return this._ExecutionTimeStart;
			}
			set
			{
				if ((this._ExecutionTimeStart != value))
				{
					this.OnExecutionTimeStartChanging(value);
					this.SendPropertyChanging();
					this._ExecutionTimeStart = value;
					this.SendPropertyChanged("ExecutionTimeStart");
					this.OnExecutionTimeStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExecutionTimeEnd", DbType="DateTime2")]
		public System.Nullable<System.DateTime> ExecutionTimeEnd
		{
			get
			{
				return this._ExecutionTimeEnd;
			}
			set
			{
				if ((this._ExecutionTimeEnd != value))
				{
					this.OnExecutionTimeEndChanging(value);
					this.SendPropertyChanging();
					this._ExecutionTimeEnd = value;
					this.SendPropertyChanged("ExecutionTimeEnd");
					this.OnExecutionTimeEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Call_Call", Storage="_Calls", ThisKey="Id", OtherKey="ParentCallId")]
		public EntitySet<Call> Calls
		{
			get
			{
				return this._Calls;
			}
			set
			{
				this._Calls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Call_Exception", Storage="_Exceptions", ThisKey="Id", OtherKey="CallId")]
		public EntitySet<Exception> Exceptions
		{
			get
			{
				return this._Exceptions;
			}
			set
			{
				this._Exceptions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Call_ParametersValue", Storage="_ParametersValues1", ThisKey="Id", OtherKey="CallId")]
		public EntitySet<ParametersValue> ParametersValues1
		{
			get
			{
				return this._ParametersValues1;
			}
			set
			{
				this._ParametersValues1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Call_PatternsCall", Storage="_PatternsCalls", ThisKey="Id", OtherKey="CallId")]
		public EntitySet<PatternsCall> PatternsCalls
		{
			get
			{
				return this._PatternsCalls;
			}
			set
			{
				this._PatternsCalls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Call_Call", Storage="_Call1", ThisKey="ParentCallId", OtherKey="Id", IsForeignKey=true)]
		public Call Call1
		{
			get
			{
				return this._Call1.Entity;
			}
			set
			{
				Call previousValue = this._Call1.Entity;
				if (((previousValue != value) 
							|| (this._Call1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Call1.Entity = null;
						previousValue.Calls.Remove(this);
					}
					this._Call1.Entity = value;
					if ((value != null))
					{
						value.Calls.Add(this);
						this._ParentCallId = value.Id;
					}
					else
					{
						this._ParentCallId = default(Nullable<long>);
					}
					this.SendPropertyChanged("Call1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExecutionTrace_Call", Storage="_ExecutionTrace", ThisKey="ExecutionTraceId", OtherKey="Id", IsForeignKey=true)]
		public ExecutionTrace ExecutionTrace
		{
			get
			{
				return this._ExecutionTrace.Entity;
			}
			set
			{
				ExecutionTrace previousValue = this._ExecutionTrace.Entity;
				if (((previousValue != value) 
							|| (this._ExecutionTrace.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ExecutionTrace.Entity = null;
						previousValue.Calls.Remove(this);
					}
					this._ExecutionTrace.Entity = value;
					if ((value != null))
					{
						value.Calls.Add(this);
						this._ExecutionTraceId = value.Id;
					}
					else
					{
						this._ExecutionTraceId = default(long);
					}
					this.SendPropertyChanged("ExecutionTrace");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subprogram_Call", Storage="_Subprogram", ThisKey="SubprogramId", OtherKey="Id", IsForeignKey=true)]
		public Subprogram Subprogram
		{
			get
			{
				return this._Subprogram.Entity;
			}
			set
			{
				Subprogram previousValue = this._Subprogram.Entity;
				if (((previousValue != value) 
							|| (this._Subprogram.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subprogram.Entity = null;
						previousValue.Calls.Remove(this);
					}
					this._Subprogram.Entity = value;
					if ((value != null))
					{
						value.Calls.Add(this);
						this._SubprogramId = value.Id;
					}
					else
					{
						this._SubprogramId = default(Nullable<long>);
					}
					this.SendPropertyChanged("Subprogram");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subprogram_Call1", Storage="_Subprogram1", ThisKey="ParentSubprogramId", OtherKey="Id", IsForeignKey=true)]
		public Subprogram Subprogram1
		{
			get
			{
				return this._Subprogram1.Entity;
			}
			set
			{
				Subprogram previousValue = this._Subprogram1.Entity;
				if (((previousValue != value) 
							|| (this._Subprogram1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subprogram1.Entity = null;
						previousValue.Calls1.Remove(this);
					}
					this._Subprogram1.Entity = value;
					if ((value != null))
					{
						value.Calls1.Add(this);
						this._ParentSubprogramId = value.Id;
					}
					else
					{
						this._ParentSubprogramId = default(Nullable<long>);
					}
					this.SendPropertyChanged("Subprogram1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Calls(Call entity)
		{
			this.SendPropertyChanging();
			entity.Call1 = this;
		}
		
		private void detach_Calls(Call entity)
		{
			this.SendPropertyChanging();
			entity.Call1 = null;
		}
		
		private void attach_Exceptions(Exception entity)
		{
			this.SendPropertyChanging();
			entity.Call = this;
		}
		
		private void detach_Exceptions(Exception entity)
		{
			this.SendPropertyChanging();
			entity.Call = null;
		}
		
		private void attach_ParametersValues1(ParametersValue entity)
		{
			this.SendPropertyChanging();
			entity.Call = this;
		}
		
		private void detach_ParametersValues1(ParametersValue entity)
		{
			this.SendPropertyChanging();
			entity.Call = null;
		}
		
		private void attach_PatternsCalls(PatternsCall entity)
		{
			this.SendPropertyChanging();
			entity.Call = this;
		}
		
		private void detach_PatternsCalls(PatternsCall entity)
		{
			this.SendPropertyChanging();
			entity.Call = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Events")]
	public partial class Event : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private System.Nullable<long> _Ordinal;
		
		private string _Subprogram;
		
		private int _Event1;
		
		private System.DateTime _EventTime;
		
		private int _Thread;
		
		private string _Description;
		
		private long _ExecutionTraceId;
		
		private System.Nullable<long> _UniqueId;
		
		private System.Nullable<long> _SubprogramId;
		
		private System.Nullable<long> _SubprogramUniqueId;
		
		private EntityRef<ExecutionTrace> _ExecutionTrace;
		
		private EntityRef<Subprogram> _Subprogram1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnOrdinalChanging(System.Nullable<long> value);
    partial void OnOrdinalChanged();
    partial void OnSubprogramChanging(string value);
    partial void OnSubprogramChanged();
    partial void OnEvent1Changing(int value);
    partial void OnEvent1Changed();
    partial void OnEventTimeChanging(System.DateTime value);
    partial void OnEventTimeChanged();
    partial void OnThreadChanging(int value);
    partial void OnThreadChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnExecutionTraceIdChanging(long value);
    partial void OnExecutionTraceIdChanged();
    partial void OnUniqueIdChanging(System.Nullable<long> value);
    partial void OnUniqueIdChanged();
    partial void OnSubprogramIdChanging(System.Nullable<long> value);
    partial void OnSubprogramIdChanged();
    partial void OnSubprogramUniqueIdChanging(System.Nullable<long> value);
    partial void OnSubprogramUniqueIdChanged();
    #endregion
		
		public Event()
		{
			this._ExecutionTrace = default(EntityRef<ExecutionTrace>);
			this._Subprogram1 = default(EntityRef<Subprogram>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ordinal", DbType="BigInt")]
		public System.Nullable<long> Ordinal
		{
			get
			{
				return this._Ordinal;
			}
			set
			{
				if ((this._Ordinal != value))
				{
					this.OnOrdinalChanging(value);
					this.SendPropertyChanging();
					this._Ordinal = value;
					this.SendPropertyChanged("Ordinal");
					this.OnOrdinalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subprogram", DbType="VarChar(MAX)")]
		public string Subprogram
		{
			get
			{
				return this._Subprogram;
			}
			set
			{
				if ((this._Subprogram != value))
				{
					this.OnSubprogramChanging(value);
					this.SendPropertyChanging();
					this._Subprogram = value;
					this.SendPropertyChanged("Subprogram");
					this.OnSubprogramChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Event", Storage="_Event1", DbType="Int NOT NULL")]
		public int Event1
		{
			get
			{
				return this._Event1;
			}
			set
			{
				if ((this._Event1 != value))
				{
					this.OnEvent1Changing(value);
					this.SendPropertyChanging();
					this._Event1 = value;
					this.SendPropertyChanged("Event1");
					this.OnEvent1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventTime", DbType="DateTime NOT NULL")]
		public System.DateTime EventTime
		{
			get
			{
				return this._EventTime;
			}
			set
			{
				if ((this._EventTime != value))
				{
					this.OnEventTimeChanging(value);
					this.SendPropertyChanging();
					this._EventTime = value;
					this.SendPropertyChanged("EventTime");
					this.OnEventTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Thread", DbType="Int NOT NULL")]
		public int Thread
		{
			get
			{
				return this._Thread;
			}
			set
			{
				if ((this._Thread != value))
				{
					this.OnThreadChanging(value);
					this.SendPropertyChanging();
					this._Thread = value;
					this.SendPropertyChanged("Thread");
					this.OnThreadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExecutionTraceId", DbType="BigInt NOT NULL")]
		public long ExecutionTraceId
		{
			get
			{
				return this._ExecutionTraceId;
			}
			set
			{
				if ((this._ExecutionTraceId != value))
				{
					if (this._ExecutionTrace.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExecutionTraceIdChanging(value);
					this.SendPropertyChanging();
					this._ExecutionTraceId = value;
					this.SendPropertyChanged("ExecutionTraceId");
					this.OnExecutionTraceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UniqueId", DbType="BigInt")]
		public System.Nullable<long> UniqueId
		{
			get
			{
				return this._UniqueId;
			}
			set
			{
				if ((this._UniqueId != value))
				{
					this.OnUniqueIdChanging(value);
					this.SendPropertyChanging();
					this._UniqueId = value;
					this.SendPropertyChanged("UniqueId");
					this.OnUniqueIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubprogramId", DbType="BigInt")]
		public System.Nullable<long> SubprogramId
		{
			get
			{
				return this._SubprogramId;
			}
			set
			{
				if ((this._SubprogramId != value))
				{
					if (this._Subprogram1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubprogramIdChanging(value);
					this.SendPropertyChanging();
					this._SubprogramId = value;
					this.SendPropertyChanged("SubprogramId");
					this.OnSubprogramIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubprogramUniqueId", DbType="BigInt")]
		public System.Nullable<long> SubprogramUniqueId
		{
			get
			{
				return this._SubprogramUniqueId;
			}
			set
			{
				if ((this._SubprogramUniqueId != value))
				{
					this.OnSubprogramUniqueIdChanging(value);
					this.SendPropertyChanging();
					this._SubprogramUniqueId = value;
					this.SendPropertyChanged("SubprogramUniqueId");
					this.OnSubprogramUniqueIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExecutionTrace_Event", Storage="_ExecutionTrace", ThisKey="ExecutionTraceId", OtherKey="Id", IsForeignKey=true)]
		public ExecutionTrace ExecutionTrace
		{
			get
			{
				return this._ExecutionTrace.Entity;
			}
			set
			{
				ExecutionTrace previousValue = this._ExecutionTrace.Entity;
				if (((previousValue != value) 
							|| (this._ExecutionTrace.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ExecutionTrace.Entity = null;
						previousValue.Events.Remove(this);
					}
					this._ExecutionTrace.Entity = value;
					if ((value != null))
					{
						value.Events.Add(this);
						this._ExecutionTraceId = value.Id;
					}
					else
					{
						this._ExecutionTraceId = default(long);
					}
					this.SendPropertyChanged("ExecutionTrace");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subprogram_Event", Storage="_Subprogram1", ThisKey="SubprogramId", OtherKey="Id", IsForeignKey=true)]
		public Subprogram Subprogram1
		{
			get
			{
				return this._Subprogram1.Entity;
			}
			set
			{
				Subprogram previousValue = this._Subprogram1.Entity;
				if (((previousValue != value) 
							|| (this._Subprogram1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subprogram1.Entity = null;
						previousValue.Events.Remove(this);
					}
					this._Subprogram1.Entity = value;
					if ((value != null))
					{
						value.Events.Add(this);
						this._SubprogramId = value.Id;
					}
					else
					{
						this._SubprogramId = default(Nullable<long>);
					}
					this.SendPropertyChanged("Subprogram1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Exceptions")]
	public partial class Exception : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private System.Nullable<long> _CallId;
		
		private long _TypeId;
		
		private long _ExecutionTraceId;
		
		private EntityRef<Call> _Call;
		
		private EntityRef<Type> _Type;
		
		private EntityRef<ExecutionTrace> _ExecutionTrace;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnCallIdChanging(System.Nullable<long> value);
    partial void OnCallIdChanged();
    partial void OnTypeIdChanging(long value);
    partial void OnTypeIdChanged();
    partial void OnExecutionTraceIdChanging(long value);
    partial void OnExecutionTraceIdChanged();
    #endregion
		
		public Exception()
		{
			this._Call = default(EntityRef<Call>);
			this._Type = default(EntityRef<Type>);
			this._ExecutionTrace = default(EntityRef<ExecutionTrace>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CallId", DbType="BigInt")]
		public System.Nullable<long> CallId
		{
			get
			{
				return this._CallId;
			}
			set
			{
				if ((this._CallId != value))
				{
					if (this._Call.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCallIdChanging(value);
					this.SendPropertyChanging();
					this._CallId = value;
					this.SendPropertyChanged("CallId");
					this.OnCallIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeId", DbType="BigInt NOT NULL")]
		public long TypeId
		{
			get
			{
				return this._TypeId;
			}
			set
			{
				if ((this._TypeId != value))
				{
					if (this._Type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIdChanging(value);
					this.SendPropertyChanging();
					this._TypeId = value;
					this.SendPropertyChanged("TypeId");
					this.OnTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExecutionTraceId", DbType="BigInt NOT NULL")]
		public long ExecutionTraceId
		{
			get
			{
				return this._ExecutionTraceId;
			}
			set
			{
				if ((this._ExecutionTraceId != value))
				{
					if (this._ExecutionTrace.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExecutionTraceIdChanging(value);
					this.SendPropertyChanging();
					this._ExecutionTraceId = value;
					this.SendPropertyChanged("ExecutionTraceId");
					this.OnExecutionTraceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Call_Exception", Storage="_Call", ThisKey="CallId", OtherKey="Id", IsForeignKey=true)]
		public Call Call
		{
			get
			{
				return this._Call.Entity;
			}
			set
			{
				Call previousValue = this._Call.Entity;
				if (((previousValue != value) 
							|| (this._Call.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Call.Entity = null;
						previousValue.Exceptions.Remove(this);
					}
					this._Call.Entity = value;
					if ((value != null))
					{
						value.Exceptions.Add(this);
						this._CallId = value.Id;
					}
					else
					{
						this._CallId = default(Nullable<long>);
					}
					this.SendPropertyChanged("Call");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Type_Exception", Storage="_Type", ThisKey="TypeId", OtherKey="Id", IsForeignKey=true)]
		public Type Type
		{
			get
			{
				return this._Type.Entity;
			}
			set
			{
				Type previousValue = this._Type.Entity;
				if (((previousValue != value) 
							|| (this._Type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Type.Entity = null;
						previousValue.Exceptions.Remove(this);
					}
					this._Type.Entity = value;
					if ((value != null))
					{
						value.Exceptions.Add(this);
						this._TypeId = value.Id;
					}
					else
					{
						this._TypeId = default(long);
					}
					this.SendPropertyChanged("Type");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExecutionTrace_Exception", Storage="_ExecutionTrace", ThisKey="ExecutionTraceId", OtherKey="Id", IsForeignKey=true)]
		public ExecutionTrace ExecutionTrace
		{
			get
			{
				return this._ExecutionTrace.Entity;
			}
			set
			{
				ExecutionTrace previousValue = this._ExecutionTrace.Entity;
				if (((previousValue != value) 
							|| (this._ExecutionTrace.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ExecutionTrace.Entity = null;
						previousValue.Exceptions.Remove(this);
					}
					this._ExecutionTrace.Entity = value;
					if ((value != null))
					{
						value.Exceptions.Add(this);
						this._ExecutionTraceId = value.Id;
					}
					else
					{
						this._ExecutionTraceId = default(long);
					}
					this.SendPropertyChanged("ExecutionTrace");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExecutionTraces")]
	public partial class ExecutionTrace : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _Experiment;
		
		private System.DateTime _StartTime;
		
		private System.Nullable<System.DateTime> _EndTime;
		
		private string _FileName;
		
		private string _State;
		
		private string _Msg;
		
		private System.Nullable<long> _NumberOfEvents;
		
		private string _ApplicationName;
		
		private string _Description;
		
		private EntitySet<Type> _Types;
		
		private EntitySet<Call> _Calls;
		
		private EntitySet<Event> _Events;
		
		private EntitySet<Exception> _Exceptions;
		
		private EntitySet<Message> _Messages;
		
		private EntitySet<Namespace> _Namespaces;
		
		private EntitySet<Parameter> _Parameters;
		
		private EntitySet<ParametersValue> _ParametersValues;
		
		private EntitySet<ProcessInfo> _ProcessInfos;
		
		private EntitySet<Subprogram> _Subprograms;
		
		private EntitySet<SystemInfo> _SystemInfos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnExperimentChanging(long value);
    partial void OnExperimentChanged();
    partial void OnStartTimeChanging(System.DateTime value);
    partial void OnStartTimeChanged();
    partial void OnEndTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnEndTimeChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnMsgChanging(string value);
    partial void OnMsgChanged();
    partial void OnNumberOfEventsChanging(System.Nullable<long> value);
    partial void OnNumberOfEventsChanged();
    partial void OnApplicationNameChanging(string value);
    partial void OnApplicationNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public ExecutionTrace()
		{
			this._Types = new EntitySet<Type>(new Action<Type>(this.attach_Types), new Action<Type>(this.detach_Types));
			this._Calls = new EntitySet<Call>(new Action<Call>(this.attach_Calls), new Action<Call>(this.detach_Calls));
			this._Events = new EntitySet<Event>(new Action<Event>(this.attach_Events), new Action<Event>(this.detach_Events));
			this._Exceptions = new EntitySet<Exception>(new Action<Exception>(this.attach_Exceptions), new Action<Exception>(this.detach_Exceptions));
			this._Messages = new EntitySet<Message>(new Action<Message>(this.attach_Messages), new Action<Message>(this.detach_Messages));
			this._Namespaces = new EntitySet<Namespace>(new Action<Namespace>(this.attach_Namespaces), new Action<Namespace>(this.detach_Namespaces));
			this._Parameters = new EntitySet<Parameter>(new Action<Parameter>(this.attach_Parameters), new Action<Parameter>(this.detach_Parameters));
			this._ParametersValues = new EntitySet<ParametersValue>(new Action<ParametersValue>(this.attach_ParametersValues), new Action<ParametersValue>(this.detach_ParametersValues));
			this._ProcessInfos = new EntitySet<ProcessInfo>(new Action<ProcessInfo>(this.attach_ProcessInfos), new Action<ProcessInfo>(this.detach_ProcessInfos));
			this._Subprograms = new EntitySet<Subprogram>(new Action<Subprogram>(this.attach_Subprograms), new Action<Subprogram>(this.detach_Subprograms));
			this._SystemInfos = new EntitySet<SystemInfo>(new Action<SystemInfo>(this.attach_SystemInfos), new Action<SystemInfo>(this.detach_SystemInfos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Experiment", DbType="BigInt NOT NULL")]
		public long Experiment
		{
			get
			{
				return this._Experiment;
			}
			set
			{
				if ((this._Experiment != value))
				{
					this.OnExperimentChanging(value);
					this.SendPropertyChanging();
					this._Experiment = value;
					this.SendPropertyChanged("Experiment");
					this.OnExperimentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="DateTime NOT NULL")]
		public System.DateTime StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileName", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="VarChar(50)")]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Msg", DbType="VarChar(MAX)")]
		public string Msg
		{
			get
			{
				return this._Msg;
			}
			set
			{
				if ((this._Msg != value))
				{
					this.OnMsgChanging(value);
					this.SendPropertyChanging();
					this._Msg = value;
					this.SendPropertyChanged("Msg");
					this.OnMsgChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfEvents", DbType="BigInt")]
		public System.Nullable<long> NumberOfEvents
		{
			get
			{
				return this._NumberOfEvents;
			}
			set
			{
				if ((this._NumberOfEvents != value))
				{
					this.OnNumberOfEventsChanging(value);
					this.SendPropertyChanging();
					this._NumberOfEvents = value;
					this.SendPropertyChanged("NumberOfEvents");
					this.OnNumberOfEventsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationName", DbType="VarChar(500)")]
		public string ApplicationName
		{
			get
			{
				return this._ApplicationName;
			}
			set
			{
				if ((this._ApplicationName != value))
				{
					this.OnApplicationNameChanging(value);
					this.SendPropertyChanging();
					this._ApplicationName = value;
					this.SendPropertyChanged("ApplicationName");
					this.OnApplicationNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExecutionTrace_Type", Storage="_Types", ThisKey="Id", OtherKey="ExecutionTraceId")]
		public EntitySet<Type> Types
		{
			get
			{
				return this._Types;
			}
			set
			{
				this._Types.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExecutionTrace_Call", Storage="_Calls", ThisKey="Id", OtherKey="ExecutionTraceId")]
		public EntitySet<Call> Calls
		{
			get
			{
				return this._Calls;
			}
			set
			{
				this._Calls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExecutionTrace_Event", Storage="_Events", ThisKey="Id", OtherKey="ExecutionTraceId")]
		public EntitySet<Event> Events
		{
			get
			{
				return this._Events;
			}
			set
			{
				this._Events.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExecutionTrace_Exception", Storage="_Exceptions", ThisKey="Id", OtherKey="ExecutionTraceId")]
		public EntitySet<Exception> Exceptions
		{
			get
			{
				return this._Exceptions;
			}
			set
			{
				this._Exceptions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExecutionTrace_Message", Storage="_Messages", ThisKey="Id", OtherKey="ExecutionTraceId")]
		public EntitySet<Message> Messages
		{
			get
			{
				return this._Messages;
			}
			set
			{
				this._Messages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExecutionTrace_Namespace", Storage="_Namespaces", ThisKey="Id", OtherKey="ExecutionTraceId")]
		public EntitySet<Namespace> Namespaces
		{
			get
			{
				return this._Namespaces;
			}
			set
			{
				this._Namespaces.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExecutionTrace_Parameter", Storage="_Parameters", ThisKey="Id", OtherKey="ExecutionTraceId")]
		public EntitySet<Parameter> Parameters
		{
			get
			{
				return this._Parameters;
			}
			set
			{
				this._Parameters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExecutionTrace_ParametersValue", Storage="_ParametersValues", ThisKey="Id", OtherKey="ExecutionTraceId")]
		public EntitySet<ParametersValue> ParametersValues
		{
			get
			{
				return this._ParametersValues;
			}
			set
			{
				this._ParametersValues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExecutionTrace_ProcessInfo", Storage="_ProcessInfos", ThisKey="Id", OtherKey="ExecutionTraceId")]
		public EntitySet<ProcessInfo> ProcessInfos
		{
			get
			{
				return this._ProcessInfos;
			}
			set
			{
				this._ProcessInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExecutionTrace_Subprogram", Storage="_Subprograms", ThisKey="Id", OtherKey="ExecutionTraceId")]
		public EntitySet<Subprogram> Subprograms
		{
			get
			{
				return this._Subprograms;
			}
			set
			{
				this._Subprograms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExecutionTrace_SystemInfo", Storage="_SystemInfos", ThisKey="Id", OtherKey="ExecutionTraceId")]
		public EntitySet<SystemInfo> SystemInfos
		{
			get
			{
				return this._SystemInfos;
			}
			set
			{
				this._SystemInfos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Types(Type entity)
		{
			this.SendPropertyChanging();
			entity.ExecutionTrace = this;
		}
		
		private void detach_Types(Type entity)
		{
			this.SendPropertyChanging();
			entity.ExecutionTrace = null;
		}
		
		private void attach_Calls(Call entity)
		{
			this.SendPropertyChanging();
			entity.ExecutionTrace = this;
		}
		
		private void detach_Calls(Call entity)
		{
			this.SendPropertyChanging();
			entity.ExecutionTrace = null;
		}
		
		private void attach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.ExecutionTrace = this;
		}
		
		private void detach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.ExecutionTrace = null;
		}
		
		private void attach_Exceptions(Exception entity)
		{
			this.SendPropertyChanging();
			entity.ExecutionTrace = this;
		}
		
		private void detach_Exceptions(Exception entity)
		{
			this.SendPropertyChanging();
			entity.ExecutionTrace = null;
		}
		
		private void attach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.ExecutionTrace = this;
		}
		
		private void detach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.ExecutionTrace = null;
		}
		
		private void attach_Namespaces(Namespace entity)
		{
			this.SendPropertyChanging();
			entity.ExecutionTrace = this;
		}
		
		private void detach_Namespaces(Namespace entity)
		{
			this.SendPropertyChanging();
			entity.ExecutionTrace = null;
		}
		
		private void attach_Parameters(Parameter entity)
		{
			this.SendPropertyChanging();
			entity.ExecutionTrace = this;
		}
		
		private void detach_Parameters(Parameter entity)
		{
			this.SendPropertyChanging();
			entity.ExecutionTrace = null;
		}
		
		private void attach_ParametersValues(ParametersValue entity)
		{
			this.SendPropertyChanging();
			entity.ExecutionTrace = this;
		}
		
		private void detach_ParametersValues(ParametersValue entity)
		{
			this.SendPropertyChanging();
			entity.ExecutionTrace = null;
		}
		
		private void attach_ProcessInfos(ProcessInfo entity)
		{
			this.SendPropertyChanging();
			entity.ExecutionTrace = this;
		}
		
		private void detach_ProcessInfos(ProcessInfo entity)
		{
			this.SendPropertyChanging();
			entity.ExecutionTrace = null;
		}
		
		private void attach_Subprograms(Subprogram entity)
		{
			this.SendPropertyChanging();
			entity.ExecutionTrace = this;
		}
		
		private void detach_Subprograms(Subprogram entity)
		{
			this.SendPropertyChanging();
			entity.ExecutionTrace = null;
		}
		
		private void attach_SystemInfos(SystemInfo entity)
		{
			this.SendPropertyChanging();
			entity.ExecutionTrace = this;
		}
		
		private void detach_SystemInfos(SystemInfo entity)
		{
			this.SendPropertyChanging();
			entity.ExecutionTrace = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Messages")]
	public partial class Message : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _Msg;
		
		private System.DateTime _DateTime;
		
		private long _ExecutionTraceId;
		
		private EntityRef<ExecutionTrace> _ExecutionTrace;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnMsgChanging(string value);
    partial void OnMsgChanged();
    partial void OnDateTimeChanging(System.DateTime value);
    partial void OnDateTimeChanged();
    partial void OnExecutionTraceIdChanging(long value);
    partial void OnExecutionTraceIdChanged();
    #endregion
		
		public Message()
		{
			this._ExecutionTrace = default(EntityRef<ExecutionTrace>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Msg", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Msg
		{
			get
			{
				return this._Msg;
			}
			set
			{
				if ((this._Msg != value))
				{
					this.OnMsgChanging(value);
					this.SendPropertyChanging();
					this._Msg = value;
					this.SendPropertyChanged("Msg");
					this.OnMsgChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTime", DbType="DateTime NOT NULL")]
		public System.DateTime DateTime
		{
			get
			{
				return this._DateTime;
			}
			set
			{
				if ((this._DateTime != value))
				{
					this.OnDateTimeChanging(value);
					this.SendPropertyChanging();
					this._DateTime = value;
					this.SendPropertyChanged("DateTime");
					this.OnDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExecutionTraceId", DbType="BigInt NOT NULL")]
		public long ExecutionTraceId
		{
			get
			{
				return this._ExecutionTraceId;
			}
			set
			{
				if ((this._ExecutionTraceId != value))
				{
					if (this._ExecutionTrace.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExecutionTraceIdChanging(value);
					this.SendPropertyChanging();
					this._ExecutionTraceId = value;
					this.SendPropertyChanged("ExecutionTraceId");
					this.OnExecutionTraceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExecutionTrace_Message", Storage="_ExecutionTrace", ThisKey="ExecutionTraceId", OtherKey="Id", IsForeignKey=true)]
		public ExecutionTrace ExecutionTrace
		{
			get
			{
				return this._ExecutionTrace.Entity;
			}
			set
			{
				ExecutionTrace previousValue = this._ExecutionTrace.Entity;
				if (((previousValue != value) 
							|| (this._ExecutionTrace.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ExecutionTrace.Entity = null;
						previousValue.Messages.Remove(this);
					}
					this._ExecutionTrace.Entity = value;
					if ((value != null))
					{
						value.Messages.Add(this);
						this._ExecutionTraceId = value.Id;
					}
					else
					{
						this._ExecutionTraceId = default(long);
					}
					this.SendPropertyChanged("ExecutionTrace");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Namespaces")]
	public partial class Namespace : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _Name;
		
		private long _ExecutionTraceId;
		
		private System.Nullable<long> _UniqueId;
		
		private EntitySet<Type> _Types;
		
		private EntityRef<ExecutionTrace> _ExecutionTrace;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnExecutionTraceIdChanging(long value);
    partial void OnExecutionTraceIdChanged();
    partial void OnUniqueIdChanging(System.Nullable<long> value);
    partial void OnUniqueIdChanged();
    #endregion
		
		public Namespace()
		{
			this._Types = new EntitySet<Type>(new Action<Type>(this.attach_Types), new Action<Type>(this.detach_Types));
			this._ExecutionTrace = default(EntityRef<ExecutionTrace>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExecutionTraceId", DbType="BigInt NOT NULL")]
		public long ExecutionTraceId
		{
			get
			{
				return this._ExecutionTraceId;
			}
			set
			{
				if ((this._ExecutionTraceId != value))
				{
					if (this._ExecutionTrace.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExecutionTraceIdChanging(value);
					this.SendPropertyChanging();
					this._ExecutionTraceId = value;
					this.SendPropertyChanged("ExecutionTraceId");
					this.OnExecutionTraceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UniqueId", DbType="BigInt")]
		public System.Nullable<long> UniqueId
		{
			get
			{
				return this._UniqueId;
			}
			set
			{
				if ((this._UniqueId != value))
				{
					this.OnUniqueIdChanging(value);
					this.SendPropertyChanging();
					this._UniqueId = value;
					this.SendPropertyChanged("UniqueId");
					this.OnUniqueIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Namespace_Type", Storage="_Types", ThisKey="Id", OtherKey="NamespaceId")]
		public EntitySet<Type> Types
		{
			get
			{
				return this._Types;
			}
			set
			{
				this._Types.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExecutionTrace_Namespace", Storage="_ExecutionTrace", ThisKey="ExecutionTraceId", OtherKey="Id", IsForeignKey=true)]
		public ExecutionTrace ExecutionTrace
		{
			get
			{
				return this._ExecutionTrace.Entity;
			}
			set
			{
				ExecutionTrace previousValue = this._ExecutionTrace.Entity;
				if (((previousValue != value) 
							|| (this._ExecutionTrace.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ExecutionTrace.Entity = null;
						previousValue.Namespaces.Remove(this);
					}
					this._ExecutionTrace.Entity = value;
					if ((value != null))
					{
						value.Namespaces.Add(this);
						this._ExecutionTraceId = value.Id;
					}
					else
					{
						this._ExecutionTraceId = default(long);
					}
					this.SendPropertyChanged("ExecutionTrace");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Types(Type entity)
		{
			this.SendPropertyChanging();
			entity.Namespace = this;
		}
		
		private void detach_Types(Type entity)
		{
			this.SendPropertyChanging();
			entity.Namespace = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Parameters")]
	public partial class Parameter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _Name;
		
		private long _TypeId;
		
		private long _SubprogramId;
		
		private long _ExecutionTraceId;
		
		private System.Nullable<long> _TypeUniqueId;
		
		private System.Nullable<long> _SubprogramUniqueId;
		
		private EntitySet<ParametersValue> _ParametersValues;
		
		private EntityRef<ExecutionTrace> _ExecutionTrace;
		
		private EntityRef<Type> _Type;
		
		private EntityRef<Subprogram> _Subprogram;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTypeIdChanging(long value);
    partial void OnTypeIdChanged();
    partial void OnSubprogramIdChanging(long value);
    partial void OnSubprogramIdChanged();
    partial void OnExecutionTraceIdChanging(long value);
    partial void OnExecutionTraceIdChanged();
    partial void OnTypeUniqueIdChanging(System.Nullable<long> value);
    partial void OnTypeUniqueIdChanged();
    partial void OnSubprogramUniqueIdChanging(System.Nullable<long> value);
    partial void OnSubprogramUniqueIdChanged();
    #endregion
		
		public Parameter()
		{
			this._ParametersValues = new EntitySet<ParametersValue>(new Action<ParametersValue>(this.attach_ParametersValues), new Action<ParametersValue>(this.detach_ParametersValues));
			this._ExecutionTrace = default(EntityRef<ExecutionTrace>);
			this._Type = default(EntityRef<Type>);
			this._Subprogram = default(EntityRef<Subprogram>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeId", DbType="BigInt NOT NULL")]
		public long TypeId
		{
			get
			{
				return this._TypeId;
			}
			set
			{
				if ((this._TypeId != value))
				{
					if (this._Type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIdChanging(value);
					this.SendPropertyChanging();
					this._TypeId = value;
					this.SendPropertyChanged("TypeId");
					this.OnTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubprogramId", DbType="BigInt NOT NULL")]
		public long SubprogramId
		{
			get
			{
				return this._SubprogramId;
			}
			set
			{
				if ((this._SubprogramId != value))
				{
					if (this._Subprogram.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubprogramIdChanging(value);
					this.SendPropertyChanging();
					this._SubprogramId = value;
					this.SendPropertyChanged("SubprogramId");
					this.OnSubprogramIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExecutionTraceId", DbType="BigInt NOT NULL")]
		public long ExecutionTraceId
		{
			get
			{
				return this._ExecutionTraceId;
			}
			set
			{
				if ((this._ExecutionTraceId != value))
				{
					if (this._ExecutionTrace.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExecutionTraceIdChanging(value);
					this.SendPropertyChanging();
					this._ExecutionTraceId = value;
					this.SendPropertyChanged("ExecutionTraceId");
					this.OnExecutionTraceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeUniqueId", DbType="BigInt")]
		public System.Nullable<long> TypeUniqueId
		{
			get
			{
				return this._TypeUniqueId;
			}
			set
			{
				if ((this._TypeUniqueId != value))
				{
					this.OnTypeUniqueIdChanging(value);
					this.SendPropertyChanging();
					this._TypeUniqueId = value;
					this.SendPropertyChanged("TypeUniqueId");
					this.OnTypeUniqueIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubprogramUniqueId", DbType="BigInt")]
		public System.Nullable<long> SubprogramUniqueId
		{
			get
			{
				return this._SubprogramUniqueId;
			}
			set
			{
				if ((this._SubprogramUniqueId != value))
				{
					this.OnSubprogramUniqueIdChanging(value);
					this.SendPropertyChanging();
					this._SubprogramUniqueId = value;
					this.SendPropertyChanged("SubprogramUniqueId");
					this.OnSubprogramUniqueIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Parameter_ParametersValue", Storage="_ParametersValues", ThisKey="Id", OtherKey="ParameterId")]
		public EntitySet<ParametersValue> ParametersValues
		{
			get
			{
				return this._ParametersValues;
			}
			set
			{
				this._ParametersValues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExecutionTrace_Parameter", Storage="_ExecutionTrace", ThisKey="ExecutionTraceId", OtherKey="Id", IsForeignKey=true)]
		public ExecutionTrace ExecutionTrace
		{
			get
			{
				return this._ExecutionTrace.Entity;
			}
			set
			{
				ExecutionTrace previousValue = this._ExecutionTrace.Entity;
				if (((previousValue != value) 
							|| (this._ExecutionTrace.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ExecutionTrace.Entity = null;
						previousValue.Parameters.Remove(this);
					}
					this._ExecutionTrace.Entity = value;
					if ((value != null))
					{
						value.Parameters.Add(this);
						this._ExecutionTraceId = value.Id;
					}
					else
					{
						this._ExecutionTraceId = default(long);
					}
					this.SendPropertyChanged("ExecutionTrace");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Type_Parameter", Storage="_Type", ThisKey="TypeId", OtherKey="Id", IsForeignKey=true)]
		public Type Type
		{
			get
			{
				return this._Type.Entity;
			}
			set
			{
				Type previousValue = this._Type.Entity;
				if (((previousValue != value) 
							|| (this._Type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Type.Entity = null;
						previousValue.Parameters.Remove(this);
					}
					this._Type.Entity = value;
					if ((value != null))
					{
						value.Parameters.Add(this);
						this._TypeId = value.Id;
					}
					else
					{
						this._TypeId = default(long);
					}
					this.SendPropertyChanged("Type");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subprogram_Parameter", Storage="_Subprogram", ThisKey="SubprogramId", OtherKey="Id", IsForeignKey=true)]
		public Subprogram Subprogram
		{
			get
			{
				return this._Subprogram.Entity;
			}
			set
			{
				Subprogram previousValue = this._Subprogram.Entity;
				if (((previousValue != value) 
							|| (this._Subprogram.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subprogram.Entity = null;
						previousValue.Parameters.Remove(this);
					}
					this._Subprogram.Entity = value;
					if ((value != null))
					{
						value.Parameters.Add(this);
						this._SubprogramId = value.Id;
					}
					else
					{
						this._SubprogramId = default(long);
					}
					this.SendPropertyChanged("Subprogram");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ParametersValues(ParametersValue entity)
		{
			this.SendPropertyChanging();
			entity.Parameter = this;
		}
		
		private void detach_ParametersValues(ParametersValue entity)
		{
			this.SendPropertyChanging();
			entity.Parameter = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ParametersValues")]
	public partial class ParametersValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _CallId;
		
		private long _ParameterId;
		
		private string _Value;
		
		private long _ExecutionTraceId;
		
		private EntityRef<Call> _Call;
		
		private EntityRef<ExecutionTrace> _ExecutionTrace;
		
		private EntityRef<Parameter> _Parameter;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnCallIdChanging(long value);
    partial void OnCallIdChanged();
    partial void OnParameterIdChanging(long value);
    partial void OnParameterIdChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnExecutionTraceIdChanging(long value);
    partial void OnExecutionTraceIdChanged();
    #endregion
		
		public ParametersValue()
		{
			this._Call = default(EntityRef<Call>);
			this._ExecutionTrace = default(EntityRef<ExecutionTrace>);
			this._Parameter = default(EntityRef<Parameter>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CallId", DbType="BigInt NOT NULL")]
		public long CallId
		{
			get
			{
				return this._CallId;
			}
			set
			{
				if ((this._CallId != value))
				{
					if (this._Call.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCallIdChanging(value);
					this.SendPropertyChanging();
					this._CallId = value;
					this.SendPropertyChanged("CallId");
					this.OnCallIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParameterId", DbType="BigInt NOT NULL")]
		public long ParameterId
		{
			get
			{
				return this._ParameterId;
			}
			set
			{
				if ((this._ParameterId != value))
				{
					if (this._Parameter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParameterIdChanging(value);
					this.SendPropertyChanging();
					this._ParameterId = value;
					this.SendPropertyChanged("ParameterId");
					this.OnParameterIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarChar(MAX)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExecutionTraceId", DbType="BigInt NOT NULL")]
		public long ExecutionTraceId
		{
			get
			{
				return this._ExecutionTraceId;
			}
			set
			{
				if ((this._ExecutionTraceId != value))
				{
					if (this._ExecutionTrace.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExecutionTraceIdChanging(value);
					this.SendPropertyChanging();
					this._ExecutionTraceId = value;
					this.SendPropertyChanged("ExecutionTraceId");
					this.OnExecutionTraceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Call_ParametersValue", Storage="_Call", ThisKey="CallId", OtherKey="Id", IsForeignKey=true)]
		public Call Call
		{
			get
			{
				return this._Call.Entity;
			}
			set
			{
				Call previousValue = this._Call.Entity;
				if (((previousValue != value) 
							|| (this._Call.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Call.Entity = null;
						previousValue.ParametersValues1.Remove(this);
					}
					this._Call.Entity = value;
					if ((value != null))
					{
						value.ParametersValues1.Add(this);
						this._CallId = value.Id;
					}
					else
					{
						this._CallId = default(long);
					}
					this.SendPropertyChanged("Call");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExecutionTrace_ParametersValue", Storage="_ExecutionTrace", ThisKey="ExecutionTraceId", OtherKey="Id", IsForeignKey=true)]
		public ExecutionTrace ExecutionTrace
		{
			get
			{
				return this._ExecutionTrace.Entity;
			}
			set
			{
				ExecutionTrace previousValue = this._ExecutionTrace.Entity;
				if (((previousValue != value) 
							|| (this._ExecutionTrace.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ExecutionTrace.Entity = null;
						previousValue.ParametersValues.Remove(this);
					}
					this._ExecutionTrace.Entity = value;
					if ((value != null))
					{
						value.ParametersValues.Add(this);
						this._ExecutionTraceId = value.Id;
					}
					else
					{
						this._ExecutionTraceId = default(long);
					}
					this.SendPropertyChanged("ExecutionTrace");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Parameter_ParametersValue", Storage="_Parameter", ThisKey="ParameterId", OtherKey="Id", IsForeignKey=true)]
		public Parameter Parameter
		{
			get
			{
				return this._Parameter.Entity;
			}
			set
			{
				Parameter previousValue = this._Parameter.Entity;
				if (((previousValue != value) 
							|| (this._Parameter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Parameter.Entity = null;
						previousValue.ParametersValues.Remove(this);
					}
					this._Parameter.Entity = value;
					if ((value != null))
					{
						value.ParametersValues.Add(this);
						this._ParameterId = value.Id;
					}
					else
					{
						this._ParameterId = default(long);
					}
					this.SendPropertyChanged("Parameter");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Patterns")]
	public partial class Pattern : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _Name;
		
		private int _Count;
		
		private int _Length;
		
		private int _NoOfDifferentSubprograms;
		
		private int _NoOfRoots;
		
		private int _SizeOfContext;
		
		private EntitySet<PatternsCall> _PatternsCalls;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCountChanging(int value);
    partial void OnCountChanged();
    partial void OnLengthChanging(int value);
    partial void OnLengthChanged();
    partial void OnNoOfDifferentSubprogramsChanging(int value);
    partial void OnNoOfDifferentSubprogramsChanged();
    partial void OnNoOfRootsChanging(int value);
    partial void OnNoOfRootsChanged();
    partial void OnSizeOfContextChanging(int value);
    partial void OnSizeOfContextChanged();
    #endregion
		
		public Pattern()
		{
			this._PatternsCalls = new EntitySet<PatternsCall>(new Action<PatternsCall>(this.attach_PatternsCalls), new Action<PatternsCall>(this.detach_PatternsCalls));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Count", DbType="Int NOT NULL")]
		public int Count
		{
			get
			{
				return this._Count;
			}
			set
			{
				if ((this._Count != value))
				{
					this.OnCountChanging(value);
					this.SendPropertyChanging();
					this._Count = value;
					this.SendPropertyChanged("Count");
					this.OnCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Length", DbType="Int NOT NULL")]
		public int Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this.OnLengthChanging(value);
					this.SendPropertyChanging();
					this._Length = value;
					this.SendPropertyChanged("Length");
					this.OnLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoOfDifferentSubprograms", DbType="Int NOT NULL")]
		public int NoOfDifferentSubprograms
		{
			get
			{
				return this._NoOfDifferentSubprograms;
			}
			set
			{
				if ((this._NoOfDifferentSubprograms != value))
				{
					this.OnNoOfDifferentSubprogramsChanging(value);
					this.SendPropertyChanging();
					this._NoOfDifferentSubprograms = value;
					this.SendPropertyChanged("NoOfDifferentSubprograms");
					this.OnNoOfDifferentSubprogramsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoOfRoots", DbType="Int NOT NULL")]
		public int NoOfRoots
		{
			get
			{
				return this._NoOfRoots;
			}
			set
			{
				if ((this._NoOfRoots != value))
				{
					this.OnNoOfRootsChanging(value);
					this.SendPropertyChanging();
					this._NoOfRoots = value;
					this.SendPropertyChanged("NoOfRoots");
					this.OnNoOfRootsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SizeOfContext", DbType="Int NOT NULL")]
		public int SizeOfContext
		{
			get
			{
				return this._SizeOfContext;
			}
			set
			{
				if ((this._SizeOfContext != value))
				{
					this.OnSizeOfContextChanging(value);
					this.SendPropertyChanging();
					this._SizeOfContext = value;
					this.SendPropertyChanged("SizeOfContext");
					this.OnSizeOfContextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pattern_PatternsCall", Storage="_PatternsCalls", ThisKey="Id", OtherKey="PatternId")]
		public EntitySet<PatternsCall> PatternsCalls
		{
			get
			{
				return this._PatternsCalls;
			}
			set
			{
				this._PatternsCalls.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PatternsCalls(PatternsCall entity)
		{
			this.SendPropertyChanging();
			entity.Pattern = this;
		}
		
		private void detach_PatternsCalls(PatternsCall entity)
		{
			this.SendPropertyChanging();
			entity.Pattern = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PatternsCalls")]
	public partial class PatternsCall : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _PatternId;
		
		private long _CallId;
		
		private int _Index;
		
		private EntityRef<Call> _Call;
		
		private EntityRef<Pattern> _Pattern;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPatternIdChanging(long value);
    partial void OnPatternIdChanged();
    partial void OnCallIdChanging(long value);
    partial void OnCallIdChanged();
    partial void OnIndexChanging(int value);
    partial void OnIndexChanged();
    #endregion
		
		public PatternsCall()
		{
			this._Call = default(EntityRef<Call>);
			this._Pattern = default(EntityRef<Pattern>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatternId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long PatternId
		{
			get
			{
				return this._PatternId;
			}
			set
			{
				if ((this._PatternId != value))
				{
					if (this._Pattern.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatternIdChanging(value);
					this.SendPropertyChanging();
					this._PatternId = value;
					this.SendPropertyChanged("PatternId");
					this.OnPatternIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CallId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long CallId
		{
			get
			{
				return this._CallId;
			}
			set
			{
				if ((this._CallId != value))
				{
					if (this._Call.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCallIdChanging(value);
					this.SendPropertyChanging();
					this._CallId = value;
					this.SendPropertyChanged("CallId");
					this.OnCallIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Index]", Storage="_Index", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Index
		{
			get
			{
				return this._Index;
			}
			set
			{
				if ((this._Index != value))
				{
					this.OnIndexChanging(value);
					this.SendPropertyChanging();
					this._Index = value;
					this.SendPropertyChanged("Index");
					this.OnIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Call_PatternsCall", Storage="_Call", ThisKey="CallId", OtherKey="Id", IsForeignKey=true)]
		public Call Call
		{
			get
			{
				return this._Call.Entity;
			}
			set
			{
				Call previousValue = this._Call.Entity;
				if (((previousValue != value) 
							|| (this._Call.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Call.Entity = null;
						previousValue.PatternsCalls.Remove(this);
					}
					this._Call.Entity = value;
					if ((value != null))
					{
						value.PatternsCalls.Add(this);
						this._CallId = value.Id;
					}
					else
					{
						this._CallId = default(long);
					}
					this.SendPropertyChanged("Call");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pattern_PatternsCall", Storage="_Pattern", ThisKey="PatternId", OtherKey="Id", IsForeignKey=true)]
		public Pattern Pattern
		{
			get
			{
				return this._Pattern.Entity;
			}
			set
			{
				Pattern previousValue = this._Pattern.Entity;
				if (((previousValue != value) 
							|| (this._Pattern.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pattern.Entity = null;
						previousValue.PatternsCalls.Remove(this);
					}
					this._Pattern.Entity = value;
					if ((value != null))
					{
						value.PatternsCalls.Add(this);
						this._PatternId = value.Id;
					}
					else
					{
						this._PatternId = default(long);
					}
					this.SendPropertyChanged("Pattern");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProcessInfo")]
	public partial class ProcessInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private System.Nullable<int> _ProcessBitWidth;
		
		private string _ProcessCommandLine;
		
		private System.Nullable<System.DateTime> _ProcessCreationTime;
		
		private System.Nullable<int> _ProcessId;
		
		private string _ProcessName;
		
		private System.Nullable<int> _SessionId;
		
		private long _ExecutionTraceId;
		
		private EntityRef<ExecutionTrace> _ExecutionTrace;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnProcessBitWidthChanging(System.Nullable<int> value);
    partial void OnProcessBitWidthChanged();
    partial void OnProcessCommandLineChanging(string value);
    partial void OnProcessCommandLineChanged();
    partial void OnProcessCreationTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnProcessCreationTimeChanged();
    partial void OnProcessIdChanging(System.Nullable<int> value);
    partial void OnProcessIdChanged();
    partial void OnProcessNameChanging(string value);
    partial void OnProcessNameChanged();
    partial void OnSessionIdChanging(System.Nullable<int> value);
    partial void OnSessionIdChanged();
    partial void OnExecutionTraceIdChanging(long value);
    partial void OnExecutionTraceIdChanged();
    #endregion
		
		public ProcessInfo()
		{
			this._ExecutionTrace = default(EntityRef<ExecutionTrace>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProcessBitWidth", DbType="Int")]
		public System.Nullable<int> ProcessBitWidth
		{
			get
			{
				return this._ProcessBitWidth;
			}
			set
			{
				if ((this._ProcessBitWidth != value))
				{
					this.OnProcessBitWidthChanging(value);
					this.SendPropertyChanging();
					this._ProcessBitWidth = value;
					this.SendPropertyChanged("ProcessBitWidth");
					this.OnProcessBitWidthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProcessCommandLine", DbType="VarChar(2000)")]
		public string ProcessCommandLine
		{
			get
			{
				return this._ProcessCommandLine;
			}
			set
			{
				if ((this._ProcessCommandLine != value))
				{
					this.OnProcessCommandLineChanging(value);
					this.SendPropertyChanging();
					this._ProcessCommandLine = value;
					this.SendPropertyChanged("ProcessCommandLine");
					this.OnProcessCommandLineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProcessCreationTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> ProcessCreationTime
		{
			get
			{
				return this._ProcessCreationTime;
			}
			set
			{
				if ((this._ProcessCreationTime != value))
				{
					this.OnProcessCreationTimeChanging(value);
					this.SendPropertyChanging();
					this._ProcessCreationTime = value;
					this.SendPropertyChanged("ProcessCreationTime");
					this.OnProcessCreationTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProcessId", DbType="Int")]
		public System.Nullable<int> ProcessId
		{
			get
			{
				return this._ProcessId;
			}
			set
			{
				if ((this._ProcessId != value))
				{
					this.OnProcessIdChanging(value);
					this.SendPropertyChanging();
					this._ProcessId = value;
					this.SendPropertyChanged("ProcessId");
					this.OnProcessIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProcessName", DbType="VarChar(2000) NOT NULL", CanBeNull=false)]
		public string ProcessName
		{
			get
			{
				return this._ProcessName;
			}
			set
			{
				if ((this._ProcessName != value))
				{
					this.OnProcessNameChanging(value);
					this.SendPropertyChanging();
					this._ProcessName = value;
					this.SendPropertyChanged("ProcessName");
					this.OnProcessNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionId", DbType="Int")]
		public System.Nullable<int> SessionId
		{
			get
			{
				return this._SessionId;
			}
			set
			{
				if ((this._SessionId != value))
				{
					this.OnSessionIdChanging(value);
					this.SendPropertyChanging();
					this._SessionId = value;
					this.SendPropertyChanged("SessionId");
					this.OnSessionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExecutionTraceId", DbType="BigInt NOT NULL")]
		public long ExecutionTraceId
		{
			get
			{
				return this._ExecutionTraceId;
			}
			set
			{
				if ((this._ExecutionTraceId != value))
				{
					if (this._ExecutionTrace.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExecutionTraceIdChanging(value);
					this.SendPropertyChanging();
					this._ExecutionTraceId = value;
					this.SendPropertyChanged("ExecutionTraceId");
					this.OnExecutionTraceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExecutionTrace_ProcessInfo", Storage="_ExecutionTrace", ThisKey="ExecutionTraceId", OtherKey="Id", IsForeignKey=true)]
		public ExecutionTrace ExecutionTrace
		{
			get
			{
				return this._ExecutionTrace.Entity;
			}
			set
			{
				ExecutionTrace previousValue = this._ExecutionTrace.Entity;
				if (((previousValue != value) 
							|| (this._ExecutionTrace.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ExecutionTrace.Entity = null;
						previousValue.ProcessInfos.Remove(this);
					}
					this._ExecutionTrace.Entity = value;
					if ((value != null))
					{
						value.ProcessInfos.Add(this);
						this._ExecutionTraceId = value.Id;
					}
					else
					{
						this._ExecutionTraceId = default(long);
					}
					this.SendPropertyChanged("ExecutionTrace");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Subprograms")]
	public partial class Subprogram : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _Name;
		
		private long _ContainingTypeId;
		
		private long _ReturnTypeId;
		
		private int _NumberOfParameters;
		
		private int _NumberOfCalls;
		
		private long _ExecutionTraceId;
		
		private System.Nullable<long> _UniqueId;
		
		private System.Nullable<long> _ContainingTypeUniqueId;
		
		private System.Nullable<long> _ReturnTypeUniqueId;
		
		private EntitySet<Call> _Calls;
		
		private EntitySet<Call> _Calls1;
		
		private EntitySet<Event> _Events;
		
		private EntitySet<Parameter> _Parameters;
		
		private EntityRef<ExecutionTrace> _ExecutionTrace;
		
		private EntityRef<Type> _Type;
		
		private EntityRef<Type> _Type1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnContainingTypeIdChanging(long value);
    partial void OnContainingTypeIdChanged();
    partial void OnReturnTypeIdChanging(long value);
    partial void OnReturnTypeIdChanged();
    partial void OnNumberOfParametersChanging(int value);
    partial void OnNumberOfParametersChanged();
    partial void OnNumberOfCallsChanging(int value);
    partial void OnNumberOfCallsChanged();
    partial void OnExecutionTraceIdChanging(long value);
    partial void OnExecutionTraceIdChanged();
    partial void OnUniqueIdChanging(System.Nullable<long> value);
    partial void OnUniqueIdChanged();
    partial void OnContainingTypeUniqueIdChanging(System.Nullable<long> value);
    partial void OnContainingTypeUniqueIdChanged();
    partial void OnReturnTypeUniqueIdChanging(System.Nullable<long> value);
    partial void OnReturnTypeUniqueIdChanged();
    #endregion
		
		public Subprogram()
		{
			this._Calls = new EntitySet<Call>(new Action<Call>(this.attach_Calls), new Action<Call>(this.detach_Calls));
			this._Calls1 = new EntitySet<Call>(new Action<Call>(this.attach_Calls1), new Action<Call>(this.detach_Calls1));
			this._Events = new EntitySet<Event>(new Action<Event>(this.attach_Events), new Action<Event>(this.detach_Events));
			this._Parameters = new EntitySet<Parameter>(new Action<Parameter>(this.attach_Parameters), new Action<Parameter>(this.detach_Parameters));
			this._ExecutionTrace = default(EntityRef<ExecutionTrace>);
			this._Type = default(EntityRef<Type>);
			this._Type1 = default(EntityRef<Type>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContainingTypeId", DbType="BigInt NOT NULL")]
		public long ContainingTypeId
		{
			get
			{
				return this._ContainingTypeId;
			}
			set
			{
				if ((this._ContainingTypeId != value))
				{
					if (this._Type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContainingTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ContainingTypeId = value;
					this.SendPropertyChanged("ContainingTypeId");
					this.OnContainingTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReturnTypeId", DbType="BigInt NOT NULL")]
		public long ReturnTypeId
		{
			get
			{
				return this._ReturnTypeId;
			}
			set
			{
				if ((this._ReturnTypeId != value))
				{
					if (this._Type1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReturnTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ReturnTypeId = value;
					this.SendPropertyChanged("ReturnTypeId");
					this.OnReturnTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfParameters", DbType="Int NOT NULL")]
		public int NumberOfParameters
		{
			get
			{
				return this._NumberOfParameters;
			}
			set
			{
				if ((this._NumberOfParameters != value))
				{
					this.OnNumberOfParametersChanging(value);
					this.SendPropertyChanging();
					this._NumberOfParameters = value;
					this.SendPropertyChanged("NumberOfParameters");
					this.OnNumberOfParametersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfCalls", DbType="Int NOT NULL")]
		public int NumberOfCalls
		{
			get
			{
				return this._NumberOfCalls;
			}
			set
			{
				if ((this._NumberOfCalls != value))
				{
					this.OnNumberOfCallsChanging(value);
					this.SendPropertyChanging();
					this._NumberOfCalls = value;
					this.SendPropertyChanged("NumberOfCalls");
					this.OnNumberOfCallsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExecutionTraceId", DbType="BigInt NOT NULL")]
		public long ExecutionTraceId
		{
			get
			{
				return this._ExecutionTraceId;
			}
			set
			{
				if ((this._ExecutionTraceId != value))
				{
					if (this._ExecutionTrace.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExecutionTraceIdChanging(value);
					this.SendPropertyChanging();
					this._ExecutionTraceId = value;
					this.SendPropertyChanged("ExecutionTraceId");
					this.OnExecutionTraceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UniqueId", DbType="BigInt")]
		public System.Nullable<long> UniqueId
		{
			get
			{
				return this._UniqueId;
			}
			set
			{
				if ((this._UniqueId != value))
				{
					this.OnUniqueIdChanging(value);
					this.SendPropertyChanging();
					this._UniqueId = value;
					this.SendPropertyChanged("UniqueId");
					this.OnUniqueIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContainingTypeUniqueId", DbType="BigInt")]
		public System.Nullable<long> ContainingTypeUniqueId
		{
			get
			{
				return this._ContainingTypeUniqueId;
			}
			set
			{
				if ((this._ContainingTypeUniqueId != value))
				{
					this.OnContainingTypeUniqueIdChanging(value);
					this.SendPropertyChanging();
					this._ContainingTypeUniqueId = value;
					this.SendPropertyChanged("ContainingTypeUniqueId");
					this.OnContainingTypeUniqueIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReturnTypeUniqueId", DbType="BigInt")]
		public System.Nullable<long> ReturnTypeUniqueId
		{
			get
			{
				return this._ReturnTypeUniqueId;
			}
			set
			{
				if ((this._ReturnTypeUniqueId != value))
				{
					this.OnReturnTypeUniqueIdChanging(value);
					this.SendPropertyChanging();
					this._ReturnTypeUniqueId = value;
					this.SendPropertyChanged("ReturnTypeUniqueId");
					this.OnReturnTypeUniqueIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subprogram_Call", Storage="_Calls", ThisKey="Id", OtherKey="SubprogramId")]
		public EntitySet<Call> Calls
		{
			get
			{
				return this._Calls;
			}
			set
			{
				this._Calls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subprogram_Call1", Storage="_Calls1", ThisKey="Id", OtherKey="ParentSubprogramId")]
		public EntitySet<Call> Calls1
		{
			get
			{
				return this._Calls1;
			}
			set
			{
				this._Calls1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subprogram_Event", Storage="_Events", ThisKey="Id", OtherKey="SubprogramId")]
		public EntitySet<Event> Events
		{
			get
			{
				return this._Events;
			}
			set
			{
				this._Events.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subprogram_Parameter", Storage="_Parameters", ThisKey="Id", OtherKey="SubprogramId")]
		public EntitySet<Parameter> Parameters
		{
			get
			{
				return this._Parameters;
			}
			set
			{
				this._Parameters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExecutionTrace_Subprogram", Storage="_ExecutionTrace", ThisKey="ExecutionTraceId", OtherKey="Id", IsForeignKey=true)]
		public ExecutionTrace ExecutionTrace
		{
			get
			{
				return this._ExecutionTrace.Entity;
			}
			set
			{
				ExecutionTrace previousValue = this._ExecutionTrace.Entity;
				if (((previousValue != value) 
							|| (this._ExecutionTrace.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ExecutionTrace.Entity = null;
						previousValue.Subprograms.Remove(this);
					}
					this._ExecutionTrace.Entity = value;
					if ((value != null))
					{
						value.Subprograms.Add(this);
						this._ExecutionTraceId = value.Id;
					}
					else
					{
						this._ExecutionTraceId = default(long);
					}
					this.SendPropertyChanged("ExecutionTrace");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Type_Subprogram", Storage="_Type", ThisKey="ContainingTypeId", OtherKey="Id", IsForeignKey=true)]
		public Type Type
		{
			get
			{
				return this._Type.Entity;
			}
			set
			{
				Type previousValue = this._Type.Entity;
				if (((previousValue != value) 
							|| (this._Type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Type.Entity = null;
						previousValue.Subprograms.Remove(this);
					}
					this._Type.Entity = value;
					if ((value != null))
					{
						value.Subprograms.Add(this);
						this._ContainingTypeId = value.Id;
					}
					else
					{
						this._ContainingTypeId = default(long);
					}
					this.SendPropertyChanged("Type");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Type_Subprogram1", Storage="_Type1", ThisKey="ReturnTypeId", OtherKey="Id", IsForeignKey=true)]
		public Type Type1
		{
			get
			{
				return this._Type1.Entity;
			}
			set
			{
				Type previousValue = this._Type1.Entity;
				if (((previousValue != value) 
							|| (this._Type1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Type1.Entity = null;
						previousValue.Subprograms1.Remove(this);
					}
					this._Type1.Entity = value;
					if ((value != null))
					{
						value.Subprograms1.Add(this);
						this._ReturnTypeId = value.Id;
					}
					else
					{
						this._ReturnTypeId = default(long);
					}
					this.SendPropertyChanged("Type1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Calls(Call entity)
		{
			this.SendPropertyChanging();
			entity.Subprogram = this;
		}
		
		private void detach_Calls(Call entity)
		{
			this.SendPropertyChanging();
			entity.Subprogram = null;
		}
		
		private void attach_Calls1(Call entity)
		{
			this.SendPropertyChanging();
			entity.Subprogram1 = this;
		}
		
		private void detach_Calls1(Call entity)
		{
			this.SendPropertyChanging();
			entity.Subprogram1 = null;
		}
		
		private void attach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.Subprogram1 = this;
		}
		
		private void detach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.Subprogram1 = null;
		}
		
		private void attach_Parameters(Parameter entity)
		{
			this.SendPropertyChanging();
			entity.Subprogram = this;
		}
		
		private void detach_Parameters(Parameter entity)
		{
			this.SendPropertyChanging();
			entity.Subprogram = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SystemInfo")]
	public partial class SystemInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private System.Nullable<long> _AvailablePageFileBytes;
		
		private System.Nullable<long> _AvailablePhysicalBytes;
		
		private System.Nullable<long> _AvailableVirtualMemoryBytes;
		
		private string _BiosDate;
		
		private string _BiosVersion;
		
		private string _ClrVersion;
		
		private string _ComputerName;
		
		private System.Nullable<bool> _IsWow64Process;
		
		private System.Nullable<int> _NumberOfProcessors;
		
		private System.Nullable<int> _OSBuildNumber;
		
		private System.Nullable<int> _OSMajorVersion;
		
		private System.Nullable<int> _OSMinorVersion;
		
		private System.Nullable<int> _OSProductType;
		
		private System.Nullable<int> _OSRole;
		
		private System.Nullable<int> _ProcessorArchitecture;
		
		private System.Nullable<int> _ProcessorLevel;
		
		private System.Nullable<int> _ProcessorRevision;
		
		private System.Nullable<int> _ProcessorSpeed;
		
		private string _ServicePack;
		
		private System.Nullable<System.DateTime> _StartTime;
		
		private string _SystemDirectory;
		
		private System.Nullable<int> _SystemLocaleId;
		
		private string _SystemManufacturer;
		
		private string _SystemProductName;
		
		private System.Nullable<long> _TimerFrequency;
		
		private System.Nullable<long> _TimerStartTime;
		
		private string _TimeZone;
		
		private System.Nullable<long> _TimeZoneBias;
		
		private System.Nullable<long> _TotalPageFileBytes;
		
		private System.Nullable<long> _TotalPhysicalBytes;
		
		private System.Nullable<long> _TotalVirtualMemoryBytes;
		
		private string _UserDomain;
		
		private string _UserName;
		
		private string _WindowsDirectory;
		
		private long _ExecutionTraceId;
		
		private EntityRef<ExecutionTrace> _ExecutionTrace;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnAvailablePageFileBytesChanging(System.Nullable<long> value);
    partial void OnAvailablePageFileBytesChanged();
    partial void OnAvailablePhysicalBytesChanging(System.Nullable<long> value);
    partial void OnAvailablePhysicalBytesChanged();
    partial void OnAvailableVirtualMemoryBytesChanging(System.Nullable<long> value);
    partial void OnAvailableVirtualMemoryBytesChanged();
    partial void OnBiosDateChanging(string value);
    partial void OnBiosDateChanged();
    partial void OnBiosVersionChanging(string value);
    partial void OnBiosVersionChanged();
    partial void OnClrVersionChanging(string value);
    partial void OnClrVersionChanged();
    partial void OnComputerNameChanging(string value);
    partial void OnComputerNameChanged();
    partial void OnIsWow64ProcessChanging(System.Nullable<bool> value);
    partial void OnIsWow64ProcessChanged();
    partial void OnNumberOfProcessorsChanging(System.Nullable<int> value);
    partial void OnNumberOfProcessorsChanged();
    partial void OnOSBuildNumberChanging(System.Nullable<int> value);
    partial void OnOSBuildNumberChanged();
    partial void OnOSMajorVersionChanging(System.Nullable<int> value);
    partial void OnOSMajorVersionChanged();
    partial void OnOSMinorVersionChanging(System.Nullable<int> value);
    partial void OnOSMinorVersionChanged();
    partial void OnOSProductTypeChanging(System.Nullable<int> value);
    partial void OnOSProductTypeChanged();
    partial void OnOSRoleChanging(System.Nullable<int> value);
    partial void OnOSRoleChanged();
    partial void OnProcessorArchitectureChanging(System.Nullable<int> value);
    partial void OnProcessorArchitectureChanged();
    partial void OnProcessorLevelChanging(System.Nullable<int> value);
    partial void OnProcessorLevelChanged();
    partial void OnProcessorRevisionChanging(System.Nullable<int> value);
    partial void OnProcessorRevisionChanged();
    partial void OnProcessorSpeedChanging(System.Nullable<int> value);
    partial void OnProcessorSpeedChanged();
    partial void OnServicePackChanging(string value);
    partial void OnServicePackChanged();
    partial void OnStartTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnStartTimeChanged();
    partial void OnSystemDirectoryChanging(string value);
    partial void OnSystemDirectoryChanged();
    partial void OnSystemLocaleIdChanging(System.Nullable<int> value);
    partial void OnSystemLocaleIdChanged();
    partial void OnSystemManufacturerChanging(string value);
    partial void OnSystemManufacturerChanged();
    partial void OnSystemProductNameChanging(string value);
    partial void OnSystemProductNameChanged();
    partial void OnTimerFrequencyChanging(System.Nullable<long> value);
    partial void OnTimerFrequencyChanged();
    partial void OnTimerStartTimeChanging(System.Nullable<long> value);
    partial void OnTimerStartTimeChanged();
    partial void OnTimeZoneChanging(string value);
    partial void OnTimeZoneChanged();
    partial void OnTimeZoneBiasChanging(System.Nullable<long> value);
    partial void OnTimeZoneBiasChanged();
    partial void OnTotalPageFileBytesChanging(System.Nullable<long> value);
    partial void OnTotalPageFileBytesChanged();
    partial void OnTotalPhysicalBytesChanging(System.Nullable<long> value);
    partial void OnTotalPhysicalBytesChanged();
    partial void OnTotalVirtualMemoryBytesChanging(System.Nullable<long> value);
    partial void OnTotalVirtualMemoryBytesChanged();
    partial void OnUserDomainChanging(string value);
    partial void OnUserDomainChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnWindowsDirectoryChanging(string value);
    partial void OnWindowsDirectoryChanged();
    partial void OnExecutionTraceIdChanging(long value);
    partial void OnExecutionTraceIdChanged();
    #endregion
		
		public SystemInfo()
		{
			this._ExecutionTrace = default(EntityRef<ExecutionTrace>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvailablePageFileBytes", DbType="BigInt")]
		public System.Nullable<long> AvailablePageFileBytes
		{
			get
			{
				return this._AvailablePageFileBytes;
			}
			set
			{
				if ((this._AvailablePageFileBytes != value))
				{
					this.OnAvailablePageFileBytesChanging(value);
					this.SendPropertyChanging();
					this._AvailablePageFileBytes = value;
					this.SendPropertyChanged("AvailablePageFileBytes");
					this.OnAvailablePageFileBytesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvailablePhysicalBytes", DbType="BigInt")]
		public System.Nullable<long> AvailablePhysicalBytes
		{
			get
			{
				return this._AvailablePhysicalBytes;
			}
			set
			{
				if ((this._AvailablePhysicalBytes != value))
				{
					this.OnAvailablePhysicalBytesChanging(value);
					this.SendPropertyChanging();
					this._AvailablePhysicalBytes = value;
					this.SendPropertyChanged("AvailablePhysicalBytes");
					this.OnAvailablePhysicalBytesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvailableVirtualMemoryBytes", DbType="BigInt")]
		public System.Nullable<long> AvailableVirtualMemoryBytes
		{
			get
			{
				return this._AvailableVirtualMemoryBytes;
			}
			set
			{
				if ((this._AvailableVirtualMemoryBytes != value))
				{
					this.OnAvailableVirtualMemoryBytesChanging(value);
					this.SendPropertyChanging();
					this._AvailableVirtualMemoryBytes = value;
					this.SendPropertyChanged("AvailableVirtualMemoryBytes");
					this.OnAvailableVirtualMemoryBytesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BiosDate", DbType="VarChar(100)")]
		public string BiosDate
		{
			get
			{
				return this._BiosDate;
			}
			set
			{
				if ((this._BiosDate != value))
				{
					this.OnBiosDateChanging(value);
					this.SendPropertyChanging();
					this._BiosDate = value;
					this.SendPropertyChanged("BiosDate");
					this.OnBiosDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BiosVersion", DbType="VarChar(100)")]
		public string BiosVersion
		{
			get
			{
				return this._BiosVersion;
			}
			set
			{
				if ((this._BiosVersion != value))
				{
					this.OnBiosVersionChanging(value);
					this.SendPropertyChanging();
					this._BiosVersion = value;
					this.SendPropertyChanged("BiosVersion");
					this.OnBiosVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClrVersion", DbType="VarChar(100)")]
		public string ClrVersion
		{
			get
			{
				return this._ClrVersion;
			}
			set
			{
				if ((this._ClrVersion != value))
				{
					this.OnClrVersionChanging(value);
					this.SendPropertyChanging();
					this._ClrVersion = value;
					this.SendPropertyChanged("ClrVersion");
					this.OnClrVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ComputerName", DbType="VarChar(200)")]
		public string ComputerName
		{
			get
			{
				return this._ComputerName;
			}
			set
			{
				if ((this._ComputerName != value))
				{
					this.OnComputerNameChanging(value);
					this.SendPropertyChanging();
					this._ComputerName = value;
					this.SendPropertyChanged("ComputerName");
					this.OnComputerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsWow64Process", DbType="Bit")]
		public System.Nullable<bool> IsWow64Process
		{
			get
			{
				return this._IsWow64Process;
			}
			set
			{
				if ((this._IsWow64Process != value))
				{
					this.OnIsWow64ProcessChanging(value);
					this.SendPropertyChanging();
					this._IsWow64Process = value;
					this.SendPropertyChanged("IsWow64Process");
					this.OnIsWow64ProcessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfProcessors", DbType="Int")]
		public System.Nullable<int> NumberOfProcessors
		{
			get
			{
				return this._NumberOfProcessors;
			}
			set
			{
				if ((this._NumberOfProcessors != value))
				{
					this.OnNumberOfProcessorsChanging(value);
					this.SendPropertyChanging();
					this._NumberOfProcessors = value;
					this.SendPropertyChanged("NumberOfProcessors");
					this.OnNumberOfProcessorsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OSBuildNumber", DbType="Int")]
		public System.Nullable<int> OSBuildNumber
		{
			get
			{
				return this._OSBuildNumber;
			}
			set
			{
				if ((this._OSBuildNumber != value))
				{
					this.OnOSBuildNumberChanging(value);
					this.SendPropertyChanging();
					this._OSBuildNumber = value;
					this.SendPropertyChanged("OSBuildNumber");
					this.OnOSBuildNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OSMajorVersion", DbType="Int")]
		public System.Nullable<int> OSMajorVersion
		{
			get
			{
				return this._OSMajorVersion;
			}
			set
			{
				if ((this._OSMajorVersion != value))
				{
					this.OnOSMajorVersionChanging(value);
					this.SendPropertyChanging();
					this._OSMajorVersion = value;
					this.SendPropertyChanged("OSMajorVersion");
					this.OnOSMajorVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OSMinorVersion", DbType="Int")]
		public System.Nullable<int> OSMinorVersion
		{
			get
			{
				return this._OSMinorVersion;
			}
			set
			{
				if ((this._OSMinorVersion != value))
				{
					this.OnOSMinorVersionChanging(value);
					this.SendPropertyChanging();
					this._OSMinorVersion = value;
					this.SendPropertyChanged("OSMinorVersion");
					this.OnOSMinorVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OSProductType", DbType="Int")]
		public System.Nullable<int> OSProductType
		{
			get
			{
				return this._OSProductType;
			}
			set
			{
				if ((this._OSProductType != value))
				{
					this.OnOSProductTypeChanging(value);
					this.SendPropertyChanging();
					this._OSProductType = value;
					this.SendPropertyChanged("OSProductType");
					this.OnOSProductTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OSRole", DbType="Int")]
		public System.Nullable<int> OSRole
		{
			get
			{
				return this._OSRole;
			}
			set
			{
				if ((this._OSRole != value))
				{
					this.OnOSRoleChanging(value);
					this.SendPropertyChanging();
					this._OSRole = value;
					this.SendPropertyChanged("OSRole");
					this.OnOSRoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProcessorArchitecture", DbType="Int")]
		public System.Nullable<int> ProcessorArchitecture
		{
			get
			{
				return this._ProcessorArchitecture;
			}
			set
			{
				if ((this._ProcessorArchitecture != value))
				{
					this.OnProcessorArchitectureChanging(value);
					this.SendPropertyChanging();
					this._ProcessorArchitecture = value;
					this.SendPropertyChanged("ProcessorArchitecture");
					this.OnProcessorArchitectureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProcessorLevel", DbType="Int")]
		public System.Nullable<int> ProcessorLevel
		{
			get
			{
				return this._ProcessorLevel;
			}
			set
			{
				if ((this._ProcessorLevel != value))
				{
					this.OnProcessorLevelChanging(value);
					this.SendPropertyChanging();
					this._ProcessorLevel = value;
					this.SendPropertyChanged("ProcessorLevel");
					this.OnProcessorLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProcessorRevision", DbType="Int")]
		public System.Nullable<int> ProcessorRevision
		{
			get
			{
				return this._ProcessorRevision;
			}
			set
			{
				if ((this._ProcessorRevision != value))
				{
					this.OnProcessorRevisionChanging(value);
					this.SendPropertyChanging();
					this._ProcessorRevision = value;
					this.SendPropertyChanged("ProcessorRevision");
					this.OnProcessorRevisionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProcessorSpeed", DbType="Int")]
		public System.Nullable<int> ProcessorSpeed
		{
			get
			{
				return this._ProcessorSpeed;
			}
			set
			{
				if ((this._ProcessorSpeed != value))
				{
					this.OnProcessorSpeedChanging(value);
					this.SendPropertyChanging();
					this._ProcessorSpeed = value;
					this.SendPropertyChanged("ProcessorSpeed");
					this.OnProcessorSpeedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServicePack", DbType="VarChar(100)")]
		public string ServicePack
		{
			get
			{
				return this._ServicePack;
			}
			set
			{
				if ((this._ServicePack != value))
				{
					this.OnServicePackChanging(value);
					this.SendPropertyChanging();
					this._ServicePack = value;
					this.SendPropertyChanged("ServicePack");
					this.OnServicePackChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SystemDirectory", DbType="VarChar(500)")]
		public string SystemDirectory
		{
			get
			{
				return this._SystemDirectory;
			}
			set
			{
				if ((this._SystemDirectory != value))
				{
					this.OnSystemDirectoryChanging(value);
					this.SendPropertyChanging();
					this._SystemDirectory = value;
					this.SendPropertyChanged("SystemDirectory");
					this.OnSystemDirectoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SystemLocaleId", DbType="Int")]
		public System.Nullable<int> SystemLocaleId
		{
			get
			{
				return this._SystemLocaleId;
			}
			set
			{
				if ((this._SystemLocaleId != value))
				{
					this.OnSystemLocaleIdChanging(value);
					this.SendPropertyChanging();
					this._SystemLocaleId = value;
					this.SendPropertyChanged("SystemLocaleId");
					this.OnSystemLocaleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SystemManufacturer", DbType="VarChar(500)")]
		public string SystemManufacturer
		{
			get
			{
				return this._SystemManufacturer;
			}
			set
			{
				if ((this._SystemManufacturer != value))
				{
					this.OnSystemManufacturerChanging(value);
					this.SendPropertyChanging();
					this._SystemManufacturer = value;
					this.SendPropertyChanged("SystemManufacturer");
					this.OnSystemManufacturerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SystemProductName", DbType="VarChar(500)")]
		public string SystemProductName
		{
			get
			{
				return this._SystemProductName;
			}
			set
			{
				if ((this._SystemProductName != value))
				{
					this.OnSystemProductNameChanging(value);
					this.SendPropertyChanging();
					this._SystemProductName = value;
					this.SendPropertyChanged("SystemProductName");
					this.OnSystemProductNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimerFrequency", DbType="BigInt")]
		public System.Nullable<long> TimerFrequency
		{
			get
			{
				return this._TimerFrequency;
			}
			set
			{
				if ((this._TimerFrequency != value))
				{
					this.OnTimerFrequencyChanging(value);
					this.SendPropertyChanging();
					this._TimerFrequency = value;
					this.SendPropertyChanged("TimerFrequency");
					this.OnTimerFrequencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimerStartTime", DbType="BigInt")]
		public System.Nullable<long> TimerStartTime
		{
			get
			{
				return this._TimerStartTime;
			}
			set
			{
				if ((this._TimerStartTime != value))
				{
					this.OnTimerStartTimeChanging(value);
					this.SendPropertyChanging();
					this._TimerStartTime = value;
					this.SendPropertyChanged("TimerStartTime");
					this.OnTimerStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeZone", DbType="VarChar(100)")]
		public string TimeZone
		{
			get
			{
				return this._TimeZone;
			}
			set
			{
				if ((this._TimeZone != value))
				{
					this.OnTimeZoneChanging(value);
					this.SendPropertyChanging();
					this._TimeZone = value;
					this.SendPropertyChanged("TimeZone");
					this.OnTimeZoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeZoneBias", DbType="BigInt")]
		public System.Nullable<long> TimeZoneBias
		{
			get
			{
				return this._TimeZoneBias;
			}
			set
			{
				if ((this._TimeZoneBias != value))
				{
					this.OnTimeZoneBiasChanging(value);
					this.SendPropertyChanging();
					this._TimeZoneBias = value;
					this.SendPropertyChanged("TimeZoneBias");
					this.OnTimeZoneBiasChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalPageFileBytes", DbType="BigInt")]
		public System.Nullable<long> TotalPageFileBytes
		{
			get
			{
				return this._TotalPageFileBytes;
			}
			set
			{
				if ((this._TotalPageFileBytes != value))
				{
					this.OnTotalPageFileBytesChanging(value);
					this.SendPropertyChanging();
					this._TotalPageFileBytes = value;
					this.SendPropertyChanged("TotalPageFileBytes");
					this.OnTotalPageFileBytesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalPhysicalBytes", DbType="BigInt")]
		public System.Nullable<long> TotalPhysicalBytes
		{
			get
			{
				return this._TotalPhysicalBytes;
			}
			set
			{
				if ((this._TotalPhysicalBytes != value))
				{
					this.OnTotalPhysicalBytesChanging(value);
					this.SendPropertyChanging();
					this._TotalPhysicalBytes = value;
					this.SendPropertyChanged("TotalPhysicalBytes");
					this.OnTotalPhysicalBytesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalVirtualMemoryBytes", DbType="BigInt")]
		public System.Nullable<long> TotalVirtualMemoryBytes
		{
			get
			{
				return this._TotalVirtualMemoryBytes;
			}
			set
			{
				if ((this._TotalVirtualMemoryBytes != value))
				{
					this.OnTotalVirtualMemoryBytesChanging(value);
					this.SendPropertyChanging();
					this._TotalVirtualMemoryBytes = value;
					this.SendPropertyChanged("TotalVirtualMemoryBytes");
					this.OnTotalVirtualMemoryBytesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserDomain", DbType="VarChar(500)")]
		public string UserDomain
		{
			get
			{
				return this._UserDomain;
			}
			set
			{
				if ((this._UserDomain != value))
				{
					this.OnUserDomainChanging(value);
					this.SendPropertyChanging();
					this._UserDomain = value;
					this.SendPropertyChanged("UserDomain");
					this.OnUserDomainChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(500)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WindowsDirectory", DbType="VarChar(500)")]
		public string WindowsDirectory
		{
			get
			{
				return this._WindowsDirectory;
			}
			set
			{
				if ((this._WindowsDirectory != value))
				{
					this.OnWindowsDirectoryChanging(value);
					this.SendPropertyChanging();
					this._WindowsDirectory = value;
					this.SendPropertyChanged("WindowsDirectory");
					this.OnWindowsDirectoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExecutionTraceId", DbType="BigInt NOT NULL")]
		public long ExecutionTraceId
		{
			get
			{
				return this._ExecutionTraceId;
			}
			set
			{
				if ((this._ExecutionTraceId != value))
				{
					if (this._ExecutionTrace.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExecutionTraceIdChanging(value);
					this.SendPropertyChanging();
					this._ExecutionTraceId = value;
					this.SendPropertyChanged("ExecutionTraceId");
					this.OnExecutionTraceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExecutionTrace_SystemInfo", Storage="_ExecutionTrace", ThisKey="ExecutionTraceId", OtherKey="Id", IsForeignKey=true)]
		public ExecutionTrace ExecutionTrace
		{
			get
			{
				return this._ExecutionTrace.Entity;
			}
			set
			{
				ExecutionTrace previousValue = this._ExecutionTrace.Entity;
				if (((previousValue != value) 
							|| (this._ExecutionTrace.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ExecutionTrace.Entity = null;
						previousValue.SystemInfos.Remove(this);
					}
					this._ExecutionTrace.Entity = value;
					if ((value != null))
					{
						value.SystemInfos.Add(this);
						this._ExecutionTraceId = value.Id;
					}
					else
					{
						this._ExecutionTraceId = default(long);
					}
					this.SendPropertyChanged("ExecutionTrace");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
